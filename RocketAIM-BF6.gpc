/*
================================================================================
version: RocketAim - BF6 Edition - v1.0
Author : Jorel1337
Copyright: 2025, RocketMod
All rights reserved ‚Äì Redistribution without explicit permission is prohibited.
You may share settings or configs, but not the script code itself without credit.
================================================================================
üåç Links & Community
- Website  : https://rocketmod.org
- Discord  : https://discord.gg/7ZGANnFEUS  (AI ChatBot for setup & settings)
- YouTube  : @CronusZenRocketMod
================================================================================
Need some help ? our AI ChatBot is available on discord to provide you the best settings depending your sensitivity and FOV !
‚ö†Ô∏èV3.7 is now alive, more info on https://rocketmod.org/downloads

üé• Important Youtube videos
üîπDemo of how to bypass for PS5 users FIRMWARE < 2.2.12 : https://youtube.com/shorts/37SvELQMMuc?feature=shared
üîπDemo of how to bypass for PS5 users FIRMWARE > 2.2.12 : https://youtube.com/shorts/mEpfDR992s4?feature=shared

‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà  _____ _____ _____ _____ _____ _____    _____ _____ ____                         *
‚ñà | __  |     |     |  |  |   __|_   _|  |     |     |    \                        *
‚ñà |    -|  |  |   --|    -|   __| | |    | | | |  |  |  |  |                       *
‚ñà |__|__|_____|_____|__|__|_____| |_|    |_|_|_|_____|____/                        *
‚ñà                                                                                 *
‚ñà                                                                                 *
‚ñà  _____ __ __       __ _____ _____ _____ __                                       *
‚ñà | __  |  |  |   __|  |     | __  |   __|  |                                      *
‚ñà | __ -|_   _|  |  |  |  |  |    -|   __|  |__                                    *
‚ñà |_____| |_|    |_____|_____|__|__|_____|_____|                                   *
‚ñà															                       *
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà Features:
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà  - ANTI RECOIL: Automatically compensates weapon recoil based on configured values.
‚ñà  - AIM ASSIST (AA ROCKET): Polar aim assist with tracker movement pattern.
‚ñà  - AUTO RUN: Enables automatic sprinting with configurable options.
‚ñà  - HOLD BREATH: Automatically holds breath while aiming down sights.
‚ñà    üîß SETTINGS:
‚ñà       - Breath Timer (s): Duration for holding breath.
‚ñà       - Time Before (s): Delay before activation.
‚ñà       - Cooldown (ms): Time between activations.
‚ñà  - ANTI AFK: Prevents inactivity disconnections.
‚ñà  - ENEMY AUTO PING: Automatically pings enemies.
‚ñà    üîß SETTINGS:
‚ñà       - Trigger Timer (s): Delay before activation.
‚ñà  - NO RUMBLE: Disables controller vibration.
‚ñà  - INVERTED AXIS & BUTTON LAYOUTS: Supports custom input layouts.
‚ñà  - NO RECOIL ACTIVATION OPTIONS: Quick toggle for Rapid Fire & Anti-Recoil.
‚ñà    üîß Allows disabling Anti-Recoil / Aim Assist if rumble rate ‚â§ chosen value
‚ñà       (value depends on controller; adjust manually).
‚ñà  - RAPID FIRE: Automatically fires semi-auto weapons at max rate.
‚ñà  - JUMPSHOT: Performs a jump when shooting.
‚ñà  - BUNNY HOP: Chains automatic jumps for faster movement.
‚ñà  - SILENT MOD: Hidden enhancements for advanced users.
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà Documentation üöÄ : https://rocketmod.org/documentation
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà Version üöÄ :
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà 	v1.0.0 :
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà    Donation üöÄ : https://rocketmod.org/support
‚ñà    If you enjoyed the script and found it useful, I‚Äôd really appreciate your support!
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà    Additional Credits:
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà    ‚ñà Taylordrift21      >  Base for Shapped Aim Assist & functions
‚ñà
‚ñà    ‚ñà DoNotAtMe ("Me.")  >  Base for "Slowdown" Aim Assist
‚ñà
‚ñà    ‚ñà Swizzy             >  Functions & Coding Tips / Review
‚ñà
‚ñà    ‚ñà Jblaze122		  >  Various functions & Design helper functions
‚ñà
‚ñà    ‚ñà Fadexz		      >  Functions & Coding Tips / Review
‚ñà
‚ñà	 ‚ñà Noozbar, DoGzTheFiGhTer for all them tutorials and others i forget ;)
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà	‚ïî‚ï¶‚ïó‚ïî‚ïê‚ïó‚ïî‚ïó‚ïî‚ïî‚ï¶‚ïó  ‚ïî‚ï¶‚ïó‚ïî‚ïê‚ïó‚ï¶ ‚ï¶‚ïî‚ïê‚ïó‚ï¶ ‚ï¶  ‚ïî‚ïê‚ïó‚ïî‚ïó‚ïî‚ï¶ ‚ï¶‚ïî‚ï¶‚ïó‚ï¶ ‚ï¶‚ï¶‚ïî‚ïó‚ïî‚ïî‚ïê‚ïó  ‚ïî‚ïó ‚ïî‚ïê‚ïó‚ï¶  ‚ï¶  ‚ïî‚ïê‚ïó‚ï¶ ‚ï¶
‚ñà	 ‚ïë‚ïë‚ïë ‚ïë‚ïë‚ïë‚ïë ‚ïë    ‚ïë ‚ïë ‚ïë‚ïë ‚ïë‚ïë  ‚ï†‚ïê‚ï£  ‚ï†‚ïê‚ï£‚ïë‚ïë‚ïë‚ïö‚ï¶‚ïù ‚ïë ‚ï†‚ïê‚ï£‚ïë‚ïë‚ïë‚ïë‚ïë ‚ï¶  ‚ï†‚ï©‚ïó‚ïë‚ï£ ‚ïë  ‚ïë  ‚ïë ‚ïë‚ïë‚ïë‚ïë
‚ñà	‚ïê‚ï©‚ïù‚ïö‚ïê‚ïù‚ïù‚ïö‚ïù ‚ï©    ‚ï© ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ï© ‚ï©  ‚ï© ‚ï©‚ïù‚ïö‚ïù ‚ï©  ‚ï© ‚ï© ‚ï©‚ï©‚ïù‚ïö‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ï©‚ïê‚ïù‚ï©‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ï©‚ïù
‚ñà		IF YOU FEEL YOU HAVE NOT THE SKILL AND A VERY GOOD CHANCE
‚ñà		   OF MESSING UP THE SCRIPT DONT CHANGE ANYTHING BELOW
‚ñà
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
*/

/***
 *      _____        __ _
 *     |  __ \      / _(_)
 *     | |  | | ___| |_ _ _ __   ___  ___
 *     | |  | |/ _ \  _| | '_ \ / _ \/ __|
 *     | |__| |  __/ | | | | | |  __/\__ \
 *     |_____/ \___|_| |_|_| |_|\___||___/
 *
 *
 */

define devMod = FALSE;
define AMOUNT_OF_MOD_TOGGLE = 8; // Reduced from 9 to 8 (removed SlideCancel Mod)
// Time before screen saver
define loadingTimer = 3000;
define SCREEN_SAVER_TIMER = 10000;
define STATE_TRANSITION_TIMER = 100;
define setupMenuscreenSaverTimer = 60000;

/***
 *     __      __        _       _     _
 *     \ \    / /       (_)     | |   | |
 *      \ \  / /_ _ _ __ _  __ _| |__ | | ___  ___
 *       \ \/ / _` | '__| |/ _` | '_ \| |/ _ \/ __|
 *        \  / (_| | |  | | (_| | |_) | |  __/\__ \
 *         \/ \__,_|_|  |_|\__,_|_.__/|_|\___||___/
 *
 *
 */

int	FIRE_BTN ,
	ADS_BTN,
	LETHAL_BTN ,
	TACTICAL_BTN ,
	JUMP_BTN ,
	CROUCH_BTN ,
	MELEE_BTN ,
	SPRINT_BTN,
	RELOAD_BTN,
	SWITCHWEAPON_BTN,
	PING_BTN;

int loadingTime = 0;
int screenSaverTimer = 0;
int stateTransitionTime = 0;

// Anti Recoil Legacy system : values
int comboAntiRecoilVertical;
int comboAntiRecoilHorizontal;

int profileId = 0;
enum { Profile1Enum=0 , Profile2Enum, Profile3Enum }
int tempProfileId = Profile1Enum;

// AIM ASSIST
int angle;

/***
 *      _______                _            __      __        _       _     _
 *     |__   __|              | |           \ \    / /       (_)     | |   | |
 *        | | ___   __ _  __ _| | ___  ___   \ \  / /_ _ _ __ _  __ _| |__ | | ___  ___
 *        | |/ _ \ / _` |/ _` | |/ _ \/ __|   \ \/ / _` | '__| |/ _` | '_ \| |/ _ \/ __|
 *        | | (_) | (_| | (_| | |  __/\__ \    \  / (_| | |  | | (_| | |_) | |  __/\__ \
 *        |_|\___/ \__, |\__, |_|\___||___/     \/ \__,_|_|  |_|\__,_|_.__/|_|\___||___/
 *                  __/ | __/ |
 *                 |___/ |___/
 */

// Deprecated system, avoid hardcoded variables
int toggleAntiRecoil[3];
int toggleAimAssistRocket = FALSE;
int toggleAntiAfk = FALSE;
int toggleAutoRun = FALSE;

// New toggles declarations
// Always bump toggle array depending Enum list
int toggle[5]; // Reduced from 6 to 5 (removed ToggleSlideCancelEnum)
enum { BlockRumble=0 , HoldBreathEnum, ToggleEnemyPingEnum, ToggleRapidFireEnum,
ToggleSilentModEnum }

/***
 *       _____      _                 __  __
 *      / ____|    | |               |  \/  |
 *     | (___   ___| |_ _   _ _ __   | \  / | ___ _ __  _   _
 *      \___ \ / _ \ __| | | | '_ \  | |\/| |/ _ \ '_ \| | | |
 *      ____) |  __/ |_| |_| | |_) | | |  | |  __/ | | | |_| |
 *     |_____/ \___|\__|\__,_| .__/  |_|  |_|\___|_| |_|\__,_|
 *                           | |
 *                           |_|
 */
int modNameId = 0;
int currentSubCfg = 0;
int currentMod = 0;
enum { AntiRecoilEnum=0 , AimAssistRocketEnum,
AutoRunEnum, HoldBreathModEnum,
AntiAfkEnum, EnemyPingEnum, RapidFireEnum, MiscEnum }

const uint8 modId[]  = {
AntiRecoilEnum, AimAssistRocketEnum,
AutoRunEnum, HoldBreathModEnum,
AntiAfkEnum, EnemyPingEnum, RapidFireEnum, MiscEnum};

// antirecoil start value for 3 profiles: profileId = 0, 1 and 2
int antiRecoilVertical[3];
int antiRecoilHorizontal[3];

/***
 *      _______        _     _              _ _           _
 *     |__   __|      | |   | |            | (_)         | |
 *        | | _____  _| |_  | |_ ___     __| |_ ___ _ __ | | __ _ _   _
 *        | |/ _ \ \/ / __| | __/ _ \   / _` | / __| '_ \| |/ _` | | | |
 *        | |  __/>  <| |_  | || (_) | | (_| | \__ \ |_) | | (_| | |_| |
 *        |_|\___/_/\_\\__|  \__\___/   \__,_|_|___/ .__/|_|\__,_|\__, |
 *                                                 | |             __/ |
 *                                                 |_|            |___/
 */
  const uint8 MODNAME[][] = {
     { 32, 32, 65, 78, 84, 73, 32, 82, 69, 67, 79, 73, 76, 32, 32, 0 }, //* "ANTI RECOIL"
     { 32, 32, 32, 65, 65, 32, 82, 79, 67, 75, 69, 84, 32, 32, 32, 0 }, //* "AA ROCKET"
     { 32, 32, 32, 65, 85, 84, 79, 32, 82, 85, 78, 32, 32, 32, 32, 0 }, //* "AUTO RUN"
     { 32, 32, 72, 79, 76, 68, 32, 66, 82, 69, 65, 84, 72, 32, 32, 0 }, //* "HOLD BREATH"
     { 32, 32, 32, 65, 78, 84, 73, 32, 65, 70, 75, 32, 32, 32, 32, 0 }, //* "ANTI AFK"
     { 32, 32, 69, 78, 69, 77, 89, 32, 80, 73, 78, 71, 32, 32, 32, 0 }, //* "ENEMY PING"
     { 32, 32, 32, 82, 65, 80, 73, 68, 32, 70, 73, 82, 69, 32, 32, 0 }, //* "Rapid Fire"
     { 32, 32, 32, 32, 32, 77, 73, 83, 67, 32, 32, 32, 32, 32, 32, 0 }  //* " Misc "
 };
const string DSAVED = "SAVED";
const string SPROFILE_1 = "Profile 1"; //* or primary weapon
const string SPROFILE_2 = "Profile 2"; //* or secondary weapon
const string SPROFILE_3 = "Profile 3"; //* or meelee weapon never used for the moment
const string SNOPROFILE = "No Profile";
const string ONOFF[] = {"OFF","ON"};
const string SETTINGSAAP[] = {
"Left Size",
"Left Speed",
"Left Shape",
"Right Size",
"Right Speed",
"Right Shape",
"Active on ADS",
"Ads Left Size",
"Ads Left Speed",
"Ads Right Size",
"Ads Right Speed",
"Activation Max",
"Activation Min",
"Boost Strength",
"Smoothing Factor",
"Aim Lock Strength",
"Breath Timer (s)",
"Time before (s)",
"Cooldown (ms)",
"Timer (s)",
"Rapid Fire Speed",
"RF Hold Time",
"Inverted",
"No Rumble",
"Buttons Layout",
"JumpShot P1",
"JumpShot P2",
"Bunny Hop",
"Vertical",
"Horizontal",
"Activation"
};
const string RANDOMETEXT[] = {"OPEN SUB MENU"};
const string arActivation[]  = {"Ads+Fire", "Fire", "Ads+Fire / Fire"};
const string BtnLayouts[] = {"Default", "Evolved", "Default Swapped ", "Bumper Jumper", "Button Puncher", "Grenadier", "Ninja"}
const string SHAPES[] = {"Circular", "Tall Oval", "Wide Oval", "Spiral", "Helix"}; // Simplified to only Circular and Box
const string AdsShapes[] = { "Left-Right" };

/***
 *       _____      _   _   _                   ______
 *      / ____|    | | | | (_)                 |  ____|
 *     | (___   ___| |_| |_ _ _ __   __ _ ___  | |__   _ __  _   _ _ __ ___
 *      \___ \ / _ \ __| __| | '_ \ / _` / __| |  __| | '_ \| | | | '_ ` _ \
 *      ____) |  __/ |_| |_| | | | | (_| \__ \ | |____| | | | |_| | | | | | |
 *     |_____/ \___|\__|\__|_|_| |_|\__, |___/ |______|_| |_|\__,_|_| |_| |_|
 *                                   __/ |
 *                                  |___/
 */
enum { LeftSizeEnum=0 , LeftSpeedEnum,LeftShapeEnum, RightSizeEnum,
RightSpeedEnum,AAShapeEnum,  OutSideFocusEnum, AdsLeftSizeEnum, AdsLeftSpeedEnum,AdsRightSizeEnum, AdsRightSpeedEnum, activationRangeMaxEnum,
activationRangeMinEnum, boostStrengthEnum,
SmoothingFactorEnum, AimLockStrengthEnum, BreathTimerEnum, TimeBeforeBreathActivationEnum,
CooldownTimerEnum, EnemyPingTimerTriggerEnum, rapidFireShotsPerSecondEnum,
rapidFireHoldTimeEnum, InvertEnum, NoRumbleEnum, buttonLayoutEnum,
jumpShotProfile1Enum, jumpShotProfile2Enum, BunnyHopEnum,
antiRecoilVerticalEnum, antiRecoilHorizontalEnum, antiRecoilActivationEnum
}

// Settings !! Adapt depending Enum quantity
int settings[50];
const int16 settingMinMax[][] = {
	{  0, 50 }, // LeftSizeEnum
	{  0, 50 }, // LeftSpeedEnum
	{  0, 0 }, // LeftShapeEnum
	{  0, 50 }, // RightSizeEnum
	{  0, 50 }, // RightSpeedEnum
	{  0, 4 }, // AAShapeEnum
	{  0, 1 }, // OutSideFocusEnum
	{  0, 50 }, // AdsLeftSizeEnum
	{  0, 50 }, // AdsLeftSpeedEnum
	{  0, 50 }, // AdsRightSizeEnum
	{  0, 50 }, // AdsRightSpeedEnum
	{  0, 100 }, // activationRangeMaxEnum
	{  0, 100 }, // activationRangeMinEnum
	{  20, 100 }, // boostStrengthEnum
	{  0, 30 }, // SmoothingFactorEnum
	{ 0, 100 },// AimLockStrengthEnum
	{  0, 4 }, // BreathTimerEnum
	{  0, 20 }, // TimeBeforeBreathActivationEnum
	{  0, 20 }, // 15 CooldownTimerEnum
	{  0, 10 }, // EnemyPingTimerTriggerEnum
	{  1, 20 }, // rapidFireShotsPerSecondEnum
	{  20, 500 }, //rapidFireHoldTimeEnum,
	{ -1, 1 }, // InvertEnum
	{  0, 1 }, // NoRumbleEnum
	{  0, 6 }, // ButtonsLayoutEnum
	{  0, 1 }, // jumpShotProfile1Enum
	{  0, 1 }, // jumpShotProfile2Enum
	{  0, 1 }, // BunnyHopEnum
	{  -50, 50 }, // antiRecoilVerticalEnum
	{  -50, 50 }, // antiRecoilHorizontalEnum
	{  0, 2 } // antiRecoilActivationEnum
};

int aimAssistShape[3];

/***
 *      ______                          _____ _
 *     |  ____|                        / ____| |
 *     | |__   _ __  _   _ _ __ ___   | (___ | |__   __ _ _ __   ___  ___
 *     |  __| | '_ \| | | | '_ ` _ \   \___ \| '_ \ / _` | '_ \ / _ \/ __|
 *     | |____| | | | |_| | | | | | |  ____) | | | | (_| | |_) |  __/\__ \
 *     |______|_| |_|\__,_|_| |_| |_| |_____/|_| |_|\__,_| .__/ \___||___/
 *                                                       | |
 *                                                       |_|
 */
enum  { CircularEnum=0, TallOvalEnum, WideOvalEnum, SpiralEnum, HelixEnum  }

enum  { LeftRightEnum = 0 }

/***
 *      _      ______ _____     _____      _
 *     | |    |  ____|  __ \   / ____|    | |
 *     | |    | |__  | |  | | | |     ___ | | ___  _ __
 *     | |    |  __| | |  | | | |    / _ \| |/ _ \| '__|
 *     | |____| |____| |__| | | |___| (_) | | (_) | |
 *     |______|______|_____/   \_____\___/|_|\___/|_|
 *
 *
 */
// Sets the LED color based on hue, saturation and brightness
// Color constants:
const int16 Color[][] = {
{ 20, 50, 50 },
{ 0, 0, 0 },
{ 0, 100, 100 },
{ 240, 100, 93 },
{ 120, 100, 50 },
{ 300, 100, 75 },
{ 20, 50, 30 }};

enum { Hue=0 , Saturation, Brightness }
enum { White=0 , Black, Red, Blue, Green, Purple, Pink }

/***
 *      _    _       _     _   ____                 _   _                       _       _     _
 *     | |  | |     | |   | | |  _ \               | | | |                     (_)     | |   | |
 *     | |__| | ___ | | __| | | |_) |_ __ ___  __ _| |_| |__   __   ____ _ _ __ _  __ _| |__ | | ___  ___
 *     |  __  |/ _ \| |/ _` | |  _ <| '__/ _ \/ _` | __| '_ \  \ \ / / _` | '__| |/ _` | '_ \| |/ _ \/ __|
 *     | |  | | (_) | | (_| | | |_) | | |  __/ (_| | |_| | | |  \ V / (_| | |  | | (_| | |_) | |  __/\__ \
 *     |_|  |_|\___/|_|\__,_| |____/|_|  \___|\__,_|\__|_| |_|   \_/ \__,_|_|  |_|\__,_|_.__/|_|\___||___/
 *
 *
 */
int InitialActivation;
int StartTimer = 0;
int BreathTimer = 0;
int CooldownTimer = 0;
int BreathTime = 0;
int StartBreathTime = 0;
int CooldownTime = 0;
int HoldBreathActive = FALSE;

int EnemyPingTimer = 0; // Global variable to track elapsed time
int enemyPingTime;

int currentLedColor = Black;

/***
 *       _____ _       _           _    _____ _        _                         _       _     _
 *      / ____| |     | |         | |  / ____| |      | |                       (_)     | |   | |
 *     | |  __| | ___ | |__   __ _| | | (___ | |_ __ _| |_ ___  __   ____ _ _ __ _  __ _| |__ | | ___  ___
 *     | | |_ | |/ _ \| '_ \ / _` | |  \___ \| __/ _` | __/ _ \ \ \ / / _` | '__| |/ _` | '_ \| |/ _ \/ __|
 *     | |__| | | (_) | |_) | (_| | |  ____) | || (_| | ||  __/  \ V / (_| | |  | | (_| | |_) | |  __/\__ \
 *      \_____|_|\___/|_.__/ \__,_|_| |_____/ \__\__,_|\__\___|   \_/ \__,_|_|  |_|\__,_|_.__/|_|\___||___/
 *
 *
 */
enum {
    STATE_OFF, // 0
    STATE_RESTART,
    STATE_LOADING, // 2
    STATE_PLAYING,
    STATE_SETUP_MENU, // 4
    STATE_SETUP_SUBMENU,
    STATE_SCREEN_SAVER, // 6
    STATE_SAVING,
    STATE_CLEAN_SCREEN, // 8
    STATE_QUICK_TOGGLE // 9
}

int currentState = STATE_LOADING;  // Start in the loading state
int previousState; // prvious state
int tempState; // Next state
int stateScreenDisplayed = FALSE;
int quickToggleModId;
int bunnyHopToggle = FALSE;

/***
 *      _____       _ _
 *     |_   _|     (_) |
 *       | |  _ __  _| |_
 *       | | | '_ \| | __|
 *      _| |_| | | | | |_
 *     |_____|_| |_|_|\__|
 *
 */
init {
	cls_oled(0);
	currentLedColor = Pink;
	SetLEDColor(currentLedColor);
	loadSettingsSvar();
	setButtonsLayout(settings[buttonLayoutEnum]);
	// setVmBaseTime() ;
}

/***
 *      __  __       _
 *     |  \/  |     (_)
 *     | \  / | __ _ _ _ __
 *     | |\/| |/ _` | | '_ \
 *     | |  | | (_| | | | | |
 *     |_|  |_|\__,_|_|_| |_|
 *
 */
main {
    switch (currentState) {
        case STATE_OFF: {
            handleOffState();
            break;
        }
        case STATE_RESTART: {
            handleRestartState();
            break;
        }
        case STATE_LOADING: {
            handleLoadingState();
            break;
        }
        case STATE_PLAYING: {
            handlePlayingState();
            break;
        }
        case STATE_SETUP_MENU: {
            handleUserSetupMenuSateInput();
            break;
        }
        case STATE_SETUP_SUBMENU: {
            handleSubMenuState();
            break;
        }
        case STATE_SCREEN_SAVER: {
            handleScreenSaverState();
            break;
        }
        case STATE_SAVING: {
            handleSavingState();
            break;
        }
        case STATE_CLEAN_SCREEN: {
            handleCleanScreenState();
            break;
        }
        case STATE_QUICK_TOGGLE: {
            handleQuickToggleState();
            break;
        }

    }
    set_val(TRACE_1, currentState);
}


/***
 *       _____ _        _         __  __                                                   _     ______               _   _
 *      / ____| |      | |       |  \/  |                                                 | |   |  ____|             | | (_)
 *     | (___ | |_ __ _| |_ ___  | \  / | __ _ _ __   __ _  __ _  ___ _ __ ___   ___ _ __ | |_  | |__ ___  _ __   ___| |_ _  ___  _ __  ___
 *      \___ \| __/ _` | __/ _ \ | |\/| |/ _` | '_ \ / _` |/ _` |/ _ \ '_ ` _ \ / _ \ '_ \| __| |  __/ _ \| '_ \ / __| __| |/ _ \| '_ \/ __|
 *      ____) | || (_| | ||  __/ | |  | | (_| | | | | (_| | (_| |  __/ | | | | |  __/ | | | |_  | | | (_) | | | | (__| |_| | (_) | | | \__ \
 *     |_____/ \__\__,_|\__\___| |_|  |_|\__,_|_| |_|\__,_|\__, |\___|_| |_| |_|\___|_| |_|\__| |_|  \___/|_| |_|\___|\__|_|\___/|_| |_|___/
 *                                                          __/ |
 *                                                         |___/
 */

function handleOffState() {
    combo_stop_all();
	combo_run(DisplayDesactivated);
	handleUserOffSateInput();
}

function handleRestartState() {
    resetToProfile1();
    previousState = currentState;
	tempState = STATE_PLAYING;
	currentState = STATE_CLEAN_SCREEN;
}

// Handles the LOADING state
function handleLoadingState() {
    if (loadingTime >= loadingTimer) { // if the timer is greater than or equal too
       combo_stop(ComboDisplayIntro);
       cls_oled(OLED_BLACK);
       resetToProfile1();
       currentState = STATE_PLAYING;
    } else {
        loadingTime += get_rtime();
        combo_run(ComboDisplayIntro);
    }
}

function handleCleanScreenState() {
	if (previousState == STATE_PLAYING && tempState == STATE_SCREEN_SAVER ) {
		cls_oled(OLED_BLACK);
	}  else if (previousState == STATE_SCREEN_SAVER && tempState == STATE_SCREEN_SAVER ) {
		cls_oled(OLED_BLACK);
	}  else if (tempState == STATE_OFF ) {
		cls_oled(OLED_BLACK);
	} else if (tempState == STATE_SETUP_MENU) {
		cls_oled(OLED_WHITE);
	} else if (tempState == STATE_RESTART)  {
		cls_oled(OLED_WHITE);
	} else {
		cls_oled(OLED_WHITE);
	}

	if (stateTransitionTime > STATE_TRANSITION_TIMER) {
    		currentState = tempState;
    		previousState = currentState;
    		stateTransitionTime = 0;
    		resetDisplay();
	} else {
			stateTransitionTime += get_rtime();
	}
}

// Handles the PLAYING state (normal gameplay)
function handlePlayingState() {
	previousState = currentState;
	resetBlinkLedAndRumble();
    displayMainScreen();
    handleUserPlayingSateInput();
    setScreenSaver();
}

// Handles the Screen saver state
function handleScreenSaverState() {
	previousState = currentState;
	handleUserPlayingSateInput();
}

/***
 *      _    _                 _ _        _    _                  _____      _                 __  __                    _____                   _
 *     | |  | |               | | |      | |  | |                / ____|    | |               |  \/  |                  |_   _|                 | |
 *     | |__| | __ _ _ __   __| | | ___  | |  | |___  ___ _ __  | (___   ___| |_ _   _ _ __   | \  / | ___ _ __  _   _    | |  _ __  _ __  _   _| |_
 *     |  __  |/ _` | '_ \ / _` | |/ _ \ | |  | / __|/ _ \ '__|  \___ \ / _ \ __| | | | '_ \  | |\/| |/ _ \ '_ \| | | |   | | | '_ \| '_ \| | | | __|
 *     | |  | | (_| | | | | (_| | |  __/ | |__| \__ \  __/ |     ____) |  __/ |_| |_| | |_) | | |  | |  __/ | | | |_| |  _| |_| | | | |_) | |_| | |_
 *     |_|  |_|\__,_|_| |_|\__,_|_|\___|  \____/|___/\___|_|    |_____/ \___|\__|\__,_| .__/  |_|  |_|\___|_| |_|\__,_| |_____|_| |_| .__/ \__,_|\__|
 *                                                                                    | |                                           | |
 *                                                                                    |_|                                           |_|
 */
function handleUserSetupMenuSateInput() {
	previousState = currentState;
	tempProfileId = profileId;

    combo_stop_all();
    block_all_inputs();

    displayCurrentModScreen();
    mainMenuProfileHandling();

    if (event_press(XB1_DOWN)) {
        switchActiveModState();
		blinkLedAndRumble();
    }

	resetBlinkLedAndRumble();

	// Open submenu
    if (event_press(XB1_A) && modId[currentMod] != AntiAfkEnum && modId[currentMod] != AutoRunEnum) {
        currentState = STATE_SETUP_SUBMENU;
    }

	// Return to gameplay
    if (event_press(XB1_B)) {
    	blinkLedAndRumble();
        saveSPVAR();
    }

	if (event_press(XB1_RIGHT)) {
		modNameId += 1;
		currentMod = modId[modNameId];
	}

	if (event_press(XB1_LEFT)) {
		modNameId -= 1;
		currentMod = modId[modNameId];
	}

	// Cycle mods name
	if(modNameId > AMOUNT_OF_MOD_TOGGLE - 1) {
		modNameId = 0;
		currentMod = modId[modNameId];
	}

	if(modNameId < 0) {
		modNameId = AMOUNT_OF_MOD_TOGGLE - 1;
		currentMod = modId[modNameId];
	}
}

// Handles the SUBMENU state
function handleSubMenuState() {
	previousState = currentState;
    displaySubModScreen(modId[currentMod]);
    if (event_press(XB1_B)) {
        tempState = STATE_SETUP_MENU; // Return Setup menu
    	currentState = STATE_CLEAN_SCREEN;
    }
}

// Handles the Saveing state
function handleSavingState() {
    if (get_val(SWITCHWEAPON_BTN)) {
        profileId = tempProfileId;
	}
	combo_run(Save);

	tempState = STATE_PLAYING;
	currentState = STATE_CLEAN_SCREEN;
	screenSaverTimer = 0;
}

function handleQuickToggleState() {
	previousState = currentState;

	set_val(XB1_UP, 0);
	set_val(XB1_DOWN, 0);
	set_val(XB1_LEFT, 0);
	set_val(XB1_RIGHT, 0);
    if (quickToggleModId == RapidFireEnum) {
  		toggle[ToggleRapidFireEnum] = !toggle[ToggleRapidFireEnum];
  		print(centerX(getStringLength( addr(MODNAME[RapidFireEnum])) , OLED_FONT_SMALL_WIDTH), 5, OLED_FONT_SMALL, OLED_BLACK, addr(MODNAME[RapidFireEnum]) );
		print(centerX(getStringLength(ONOFF[toggle[ToggleRapidFireEnum]]), OLED_FONT_LARGE_WIDTH) ,38,OLED_FONT_LARGE,OLED_BLACK,ONOFF[toggle[ToggleRapidFireEnum]]);
		tempState = STATE_PLAYING;
		currentState = STATE_CLEAN_SCREEN;
    } else if (quickToggleModId == AntiRecoilEnum) {
    	displaySubModScreen(modId[AntiRecoilEnum]);
    }
}



/***
 *       _____      _     __  __           _   _______                _         _____ _        _
 *      / ____|    | |   |  \/  |         | | |__   __|              | |       / ____| |      | |
 *     | |  __  ___| |_  | \  / | ___   __| |    | | ___   __ _  __ _| | ___  | (___ | |_ __ _| |_ ___
 *     | | |_ |/ _ \ __| | |\/| |/ _ \ / _` |    | |/ _ \ / _` |/ _` | |/ _ \  \___ \| __/ _` | __/ _ \
 *     | |__| |  __/ |_  | |  | | (_) | (_| |    | | (_) | (_| | (_| | |  __/  ____) | || (_| | ||  __/
 *      \_____|\___|\__| |_|  |_|\___/ \__,_|    |_|\___/ \__, |\__, |_|\___| |_____/ \__\__,_|\__\___|
 *                                                         __/ | __/ |
 *                                                        |___/ |___/
 */
function getModToggleState(mod) {
    switch (mod) {
        case AntiRecoilEnum: {
         return toggleAntiRecoil[profileId];
        }
        case AutoRunEnum: {
        	return toggleAutoRun;
        }
        case AimAssistRocketEnum: {
        	return toggleAimAssistRocket;
        }
        case AntiAfkEnum: {
        	return toggleAntiAfk;
        }
        case HoldBreathModEnum: {
        	return toggle[HoldBreathEnum];
        }
        case EnemyPingEnum:  {
        	return toggle[ToggleEnemyPingEnum];
        }
        case RapidFireEnum: {
        	return toggle[ToggleRapidFireEnum];
        }
    }
    return 0;
}

/***
 *       _____         _ _       _                    _   _             __  __           _    _____ _        _
 *      / ____|       (_) |     | |         /\       | | (_)           |  \/  |         | |  / ____| |      | |
 *     | (_____      ___| |_ ___| |__      /  \   ___| |_ ___   _____  | \  / | ___   __| | | (___ | |_ __ _| |_ ___
 *      \___ \ \ /\ / / | __/ __| '_ \    / /\ \ / __| __| \ \ / / _ \ | |\/| |/ _ \ / _` |  \___ \| __/ _` | __/ _ \
 *      ____) \ V  V /| | || (__| | | |  / ____ \ (__| |_| |\ V /  __/ | |  | | (_) | (_| |  ____) | || (_| | ||  __/
 *     |_____/ \_/\_/ |_|\__\___|_| |_| /_/    \_\___|\__|_| \_/ \___| |_|  |_|\___/ \__,_| |_____/ \__\__,_|\__\___|
 *
 *
 */
function switchActiveModState() {
    switch (modId[currentMod]) {
        case AntiRecoilEnum:  {
         toggleAntiRecoil[profileId] = !toggleAntiRecoil[profileId];
         break;
        }
        case AimAssistRocketEnum: {
         toggleAimAssistRocket = !toggleAimAssistRocket;
         break;
        }
        case AutoRunEnum: {
         toggleAutoRun = !toggleAutoRun;
         break;
        }
        case AntiAfkEnum: {
         toggleAntiAfk = !toggleAntiAfk;
         break;
        }
        case HoldBreathModEnum: {
         toggle[HoldBreathEnum] = !toggle[HoldBreathEnum];
         break;
        }
        case EnemyPingEnum: {
         toggle[ToggleEnemyPingEnum] = !toggle[ToggleEnemyPingEnum];
         break;
        }
        case RapidFireEnum: {
         toggle[ToggleRapidFireEnum] = !toggle[ToggleRapidFireEnum];
         break;
        }
    }
}

/***
 *       _____                       __  _                     _    _____ _______      __     _____
 *      / ____|                     / / | |                   | |  / ____|  __ \ \    / /\   |  __ \
 *     | (___   __ ___   _____     / /  | |     ___   __ _  __| | | (___ | |__) \ \  / /  \  | |__) |
 *      \___ \ / _` \ \ / / _ \   / /   | |    / _ \ / _` |/ _` |  \___ \|  ___/ \ \/ / /\ \ |  _  /
 *      ____) | (_| |\ V /  __/  / /    | |___| (_) | (_| | (_| |  ____) | |      \  / ____ \| | \ \
 *     |_____/ \__,_| \_/ \___| /_/     |______\___/ \__,_|\__,_| |_____/|_|       \/_/    \_\_|  \_\
 *
 *
 */
function saveSPVAR() {
	set_pvar(SPVAR_1, toggleAntiRecoil[Profile1Enum]);
	set_pvar(SPVAR_2 , antiRecoilVertical[Profile1Enum]);
	set_pvar(SPVAR_3 , antiRecoilHorizontal[Profile1Enum]);
	set_pvar(SPVAR_4 , settings[BunnyHopEnum]);
	set_pvar(SPVAR_5 , toggleAimAssistRocket);
	set_pvar(SPVAR_8 , toggle[ToggleSilentModEnum]);
	set_pvar(SPVAR_10,toggleAntiRecoil[Profile2Enum]);
	set_pvar(SPVAR_11 ,antiRecoilVertical[Profile2Enum]);
	set_pvar(SPVAR_12 ,antiRecoilHorizontal[Profile2Enum]);
	set_pvar(SPVAR_15 ,settings[AdsLeftSpeedEnum]);
	set_pvar(SPVAR_16 ,settings[LeftShapeEnum]);
	set_pvar(SPVAR_17 ,settings[AdsRightSpeedEnum]);
	set_pvar(SPVAR_18 ,settings[AdsLeftSizeEnum]);
	set_pvar(SPVAR_19 ,settings[AdsRightSizeEnum]);
	set_pvar(SPVAR_20, toggleAntiRecoil[Profile3Enum]);
	set_pvar(SPVAR_21 ,antiRecoilVertical[Profile3Enum]);
	set_pvar(SPVAR_22 ,antiRecoilHorizontal[Profile3Enum]);

	set_pvar(SPVAR_29 ,settings[AimLockStrengthEnum]);
    set_pvar(SPVAR_30, toggleAutoRun  );

    set_pvar(SPVAR_37, settings[OutSideFocusEnum]);
   	set_pvar(SPVAR_38, settings[LeftSizeEnum]);
	set_pvar(SPVAR_39, settings[LeftSpeedEnum]);
	set_pvar(SPVAR_40, settings[RightSizeEnum]);
	set_pvar(SPVAR_41, settings[RightSpeedEnum]);
	set_pvar(SPVAR_42, settings[boostStrengthEnum]);
	set_pvar(SPVAR_43, settings[NoRumbleEnum]);
	set_pvar(SPVAR_44, settings[activationRangeMaxEnum]);
	set_pvar(SPVAR_45, settings[activationRangeMinEnum]);
	set_pvar(SPVAR_46, toggle[HoldBreathEnum]);
	set_pvar(SPVAR_47, settings[EnemyPingTimerTriggerEnum]);
	set_pvar(SPVAR_48, settings[InvertEnum]);
	set_pvar(SPVAR_49, toggle[ToggleEnemyPingEnum]);
	set_pvar(SPVAR_51, aimAssistShape[Profile1Enum]);
	set_pvar(SPVAR_52, aimAssistShape[Profile2Enum]);
	set_pvar(SPVAR_55, settings[SmoothingFactorEnum]);
	set_pvar(SPVAR_57, settings[BreathTimerEnum]);
	set_pvar(SPVAR_58, settings[TimeBeforeBreathActivationEnum]);
	set_pvar(SPVAR_59, settings[CooldownTimerEnum]);
	set_pvar(SPVAR_60, settings[buttonLayoutEnum]);
	set_pvar(SPVAR_61, settings[antiRecoilActivationEnum]);
	set_pvar(SPVAR_62, settings[rapidFireShotsPerSecondEnum]);
	set_pvar(SPVAR_63, settings[rapidFireHoldTimeEnum]);
	set_pvar(SPVAR_64, toggle[ToggleRapidFireEnum]);

	previousState = currentState;
	currentState = STATE_SAVING;
}

function loadSettingsSvar() {
	toggleAntiRecoil[0] = get_pvar(SPVAR_1, 0, 1, 0 );
	antiRecoilVertical[0]   = get_pvar(SPVAR_2, -50, 50, 22);
	antiRecoilHorizontal[0] = get_pvar(SPVAR_3, -50, 50, 0);

    settings[BunnyHopEnum] = get_pvar(SPVAR_4, 0, 1, 0);
	toggleAimAssistRocket = get_pvar(SPVAR_5, 1, 1, 1 );
	toggle[ToggleSilentModEnum] = get_pvar(SPVAR_8, 0, 1, 0 );

	toggleAntiRecoil[1] = get_pvar(SPVAR_10, 0, 1, 0 );
	antiRecoilVertical[1]   = get_pvar(SPVAR_11, -50, 50, 20);
	antiRecoilHorizontal[1] = get_pvar(SPVAR_12, -50, 50, 0);


    settings[AdsLeftSpeedEnum] = get_pvar(SPVAR_15, settingMinMax[AdsLeftSpeedEnum][0], settingMinMax[AdsLeftSpeedEnum][1], 1);
    settings[LeftShapeEnum] = get_pvar(SPVAR_16, settingMinMax[LeftShapeEnum][0], settingMinMax[LeftShapeEnum][1], 0);
    settings[AdsRightSpeedEnum] = get_pvar(SPVAR_17, settingMinMax[AdsRightSpeedEnum][0], settingMinMax[AdsRightSpeedEnum][1], 0);

    settings[AdsLeftSizeEnum] = get_pvar(SPVAR_18, settingMinMax[AdsLeftSizeEnum][0], settingMinMax[AdsLeftSizeEnum][1], 0);
    settings[AdsRightSizeEnum] = get_pvar(SPVAR_19, settingMinMax[AdsRightSizeEnum][0], settingMinMax[AdsRightSizeEnum][1], 0);

    toggleAutoRun   = get_pvar(SPVAR_31, 0, 1, 1);
	settings[LeftSizeEnum] = get_pvar(SPVAR_38, 1, settingMinMax[LeftSizeEnum][1], 10);
	settings[LeftSpeedEnum] = get_pvar(SPVAR_39, 1, settingMinMax[LeftSpeedEnum][1], 20);
	settings[RightSizeEnum] = get_pvar(SPVAR_40, 1, settingMinMax[RightSizeEnum][1],  5);
	settings[RightSpeedEnum] = get_pvar(SPVAR_41, 1, settingMinMax[RightSpeedEnum][1], 42);
	settings[boostStrengthEnum] = get_pvar(SPVAR_42, 1, settingMinMax[boostStrengthEnum][1], 20);
	settings[OutSideFocusEnum] = get_pvar(SPVAR_37, 1, settingMinMax[OutSideFocusEnum][1], 1);
	settings[NoRumbleEnum] = get_pvar(SPVAR_43, 1, 1, 1);
	toggle[HoldBreathEnum] = get_pvar(SPVAR_46, 0, 1, 1);
	settings[activationRangeMinEnum] =  get_pvar(SPVAR_45, 0, settingMinMax[activationRangeMinEnum][1], 0);
	settings[activationRangeMaxEnum] = get_pvar(SPVAR_44, 1, settingMinMax[activationRangeMaxEnum][1], 100);


	aimAssistShape[Profile1Enum] = get_pvar(SPVAR_51, CircularEnum, HelixEnum, CircularEnum);
	aimAssistShape[Profile2Enum] = get_pvar(SPVAR_52, CircularEnum, HelixEnum, CircularEnum);
    aimAssistShape[Profile3Enum] = aimAssistShape[Profile1Enum];

    settings[SmoothingFactorEnum] = get_pvar(SPVAR_55, 1, settingMinMax[SmoothingFactorEnum][1], 3);
    settings[AimLockStrengthEnum] = get_pvar(SPVAR_29, 1,  settingMinMax[AimLockStrengthEnum][1], 100);
    settings[BreathTimerEnum] = get_pvar(SPVAR_57, 1, 20, 3)
 	settings[TimeBeforeBreathActivationEnum] = get_pvar(SPVAR_58, 1, 20, 5);
    settings[CooldownTimerEnum] = get_pvar(SPVAR_59, 1, 20, 3);

    settings[EnemyPingTimerTriggerEnum] = get_pvar(SPVAR_47, 1, 10, 3);
    toggle[ToggleEnemyPingEnum] = get_pvar(SPVAR_49, 0, 1, 0);

	settings[InvertEnum] = get_pvar(SPVAR_48, -1, 1, 1 );
	if (settings[InvertEnum] != (-1 || 1 )) {
		settings[InvertEnum] = 1;
	}


    settings[buttonLayoutEnum] = get_pvar(SPVAR_60, 0, 21, 0);
    settings[antiRecoilActivationEnum] = get_pvar(SPVAR_61, 0, 2, 0);
    settings[rapidFireShotsPerSecondEnum] = get_pvar(SPVAR_62, 1, 20, 20);
    settings[rapidFireHoldTimeEnum] = get_pvar(SPVAR_63, 20, 500, 20);

    toggle[ToggleRapidFireEnum] = get_pvar(SPVAR_64, 0, 1, 0);
}

/***
 *      _____                           __  _____  _           _               ______                _   _
 *     |  __ \                         / / |  __ \(_)         | |             |  ____|              | | (_)
 *     | |  | |_ __ __ ___      __    / /  | |  | |_ ___ _ __ | | __ _ _   _  | |__ _   _ _ __   ___| |_ _  ___  _ __  ___
 *     | |  | | '__/ _` \ \ /\ / /   / /   | |  | | / __| '_ \| |/ _` | | | | |  __| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
 *     | |__| | | | (_| |\ V  V /   / /    | |__| | \__ \ |_) | | (_| | |_| | | |  | |_| | | | | (__| |_| | (_) | | | \__ \
 *     |_____/|_|  \__,_| \_/\_/   /_/     |_____/|_|___/ .__/|_|\__,_|\__, | |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
 *                                                      | |             __/ |
 *                                                      |_|            |___/
 */
int range, filled_width, cursor_position;
function drawProgressBarWithCursor(dpb_x,  dpb_y,  dpb_width,  dpb_height,  dpb_value,  dpb_min_value,  dpb_max_value) {
	range = dpb_max_value - dpb_min_value;
    filled_width = ((dpb_value - dpb_min_value) * dpb_width) / range;

    cursor_position = dpb_x + filled_width;

    rect_oled(dpb_x, dpb_y, dpb_width, dpb_height,0, 0);

    if (filled_width > 0) {
        rect_oled(dpb_x, dpb_y, filled_width, dpb_height, 1, 0);
    }
    line_oled(cursor_position, dpb_y - 2, cursor_position, dpb_y + dpb_height + 2, 4, 0);
}

int dynamicArrowColor;
function displayMiddleLine(arrowLeft, arrowRight, lButton, rButton, lineX, lineY, lineColor) {
	dynamicArrowColor = !lineColor;
	line_oled(lineX, lineY, 127, lineY, 15, lineColor);

	if (arrowLeft) {
   		displayArrowLeft(5, lineY + 7, 50, dynamicArrowColor);
	}
	if (arrowRight) {
		displayArrowRight(115, lineY + 7 , 50, dynamicArrowColor);
	}
	if (lButton) {
		putc_oled(1, ASCII_UPPER_L);
		putc_oled(2, ASCII_UPPER_B);
   		puts_oled(5, lineY, OLED_FONT_SMALL, 2, dynamicArrowColor);
	}
	if (rButton) {
   		putc_oled(1, ASCII_UPPER_R);
		putc_oled(2, ASCII_UPPER_B);
    	puts_oled(110, lineY, OLED_FONT_SMALL, 2, dynamicArrowColor);
	}
}

int sizeArray;
function displayArrowRight( dar_x,  dar_y,  dar_sizePercent, dar_color) {
    sizeArray = (dar_sizePercent * 10) / 100;
    line_oled(dar_x, dar_y, dar_x + sizeArray, dar_y, 1, dar_color);
    line_oled(dar_x + sizeArray, dar_y, dar_x + sizeArray - (sizeArray / 2), dar_y - (sizeArray / 2), 1, dar_color);
    line_oled(dar_x + sizeArray, dar_y, dar_x + sizeArray - (sizeArray / 2), dar_y + (sizeArray / 2), 1, dar_color);
}

function displayArrowLeft( dal_x, dal_y, dal_sizePercent, dal_color) {
    sizeArray = (dal_sizePercent * 10) / 100;

    line_oled(dal_x, dal_y, dal_x + sizeArray, dal_y, 1, dal_color);
    line_oled(dal_x, dal_y, dal_x + (sizeArray / 2), dal_y - (sizeArray / 2), 1, dal_color);
    line_oled(dal_x, dal_y, dal_x + (sizeArray / 2), dal_y + (sizeArray / 2), 1, dal_color);
}


const int16 messagePositions[] =
{60,68,76,84,92,100,108,116,124,132,140,148,156,164,
                     172,180,188,196,204,212,220,228,236,244,252,260,268,276};

const int8 messageArrayXbox[] = {
    ASCII_UPPER_P,
    ASCII_UPPER_R,
    ASCII_UPPER_E,
    ASCII_UPPER_S,
    ASCII_UPPER_S,
    ASCII_SPACE,
    ASCII_UPPER_L,
    ASCII_UPPER_T,
    ASCII_PLUS,
    ASCII_UPPER_M,
    ASCII_UPPER_E,
    ASCII_UPPER_N,
    ASCII_UPPER_U,
    ASCII_SPACE,
    ASCII_UPPER_T,
    ASCII_UPPER_O,
    ASCII_SPACE,
    ASCII_UPPER_O,
    ASCII_UPPER_P,
    ASCII_UPPER_E,
    ASCII_UPPER_N,
    ASCII_SPACE,
    ASCII_UPPER_S,
    ASCII_UPPER_E,
    ASCII_UPPER_T,
    ASCII_UPPER_U,
    ASCII_UPPER_P,
    ASCII_SPACE
};

const int8 messageArrayPS5[] = {
    ASCII_SPACE,
    ASCII_SPACE,
    ASCII_SPACE,
    ASCII_UPPER_L,
    ASCII_DIGIT2,
    ASCII_PLUS,
    ASCII_UPPER_O,
    ASCII_UPPER_P,
    ASCII_UPPER_T,
    ASCII_UPPER_I,
    ASCII_UPPER_O,
    ASCII_UPPER_N,
    ASCII_UPPER_S,
    ASCII_SPACE,
    ASCII_UPPER_T,
    ASCII_UPPER_O,
    ASCII_SPACE,
    ASCII_UPPER_O,
    ASCII_UPPER_P,
    ASCII_UPPER_E,
    ASCII_UPPER_N,
    ASCII_SPACE,
    ASCII_UPPER_S,
    ASCII_UPPER_E,
    ASCII_UPPER_T,
    ASCII_UPPER_U,
    ASCII_UPPER_P,
    ASCII_SPACE,
    ASCII_SPACE
};


// Display scrolling text on OLED
int offset = 0;
int iScroll =0;
int lastUpdate=0;
define SCROLL_INTERVAL = 40; // milliseconds
function displayPressToOpenMenu() {
    lastUpdate += get_rtime();
    if (lastUpdate < SCROLL_INTERVAL) return; // throttle updates
	for(iScroll = 0; iScroll < 28; iScroll++) {
		if (get_controller() == PIO_PS5 || get_controller() == PIO_PS4) {
			displayChar(messageArrayPS5[iScroll],  messagePositions[iScroll], 47, OLED_BLACK);
		} else {
			displayChar(messageArrayXbox[iScroll],  messagePositions[iScroll], 47, OLED_BLACK);
		}

		if ( iScroll == 27 ) {
		 lastUpdate = 0;
		}
	}
	offset = offset + 1;
}

// Helper function to simplify character printing
function displayChar(ascii_char, initial_pos, yPosition, color) {
    putc_oled(1, ascii_char);
    puts_oled(initial_pos - offset, yPosition, 0, 1, color);
}


function initScreenSaver() {
	 screenSaverTimer = 0;
	 currentState = STATE_PLAYING;
}

function setScreenSaver() {
    if (screenSaverTimer >= SCREEN_SAVER_TIMER) { // if the timer is greater than or equal too
    	tempState = STATE_SCREEN_SAVER;
    	currentState = STATE_CLEAN_SCREEN;
    } else {
    	screenSaverTimer += get_rtime();
    }
}

function drawModTitle(modMenu) {
     print(centerX(getStringLength(addr(MODNAME[modMenu])), OLED_FONT_SMALL_WIDTH), 5, OLED_FONT_SMALL, OLED_BLACK, addr(MODNAME[modMenu]));
     line_oled(0, 20, 127, 20, 2, OLED_BLACK);
 }

 function drawSettingLabel(settingIndex) {
     print(centerX(getStringLength(SETTINGSAAP[settingIndex]), OLED_FONT_SMALL_WIDTH), 25, OLED_FONT_SMALL, OLED_BLACK, SETTINGSAAP[settingIndex]);
 }

int settingMin, settingMax, drawingValue;
 function drawStandardSetting(settingIndex, usePercent) {
     drawSettingLabel(settingIndex);
     drawingValue = settings[settingIndex];
     settingMin = settingMinMax[settingIndex][0];
     settingMax = settingMinMax[settingIndex][1];
     if (usePercent) {
         drawingValue *= 100; settingMin *= 100; settingMax *= 100;
     }
     drawProgressBarWithCursor(15, 40, 100, 10, drawingValue, settingMin, settingMax);
     numberToString(drawingValue, findDigits(drawingValue), OLED_FONT_SMALL, OLED_FONT_SMALL_WIDTH, cursor_position - 2, 55, OLED_BLACK);
 }

/***
 *      _____  _           _               __  __       _          _____
 *     |  __ \(_)         | |             |  \/  |     (_)        / ____|
 *     | |  | |_ ___ _ __ | | __ _ _   _  | \  / | __ _ _ _ __   | (___   ___ _ __ ___  ___ _ __
 *     | |  | | / __| '_ \| |/ _` | | | | | |\/| |/ _` | | '_ \   \___ \ / __| '__/ _ \/ _ \ '_ \
 *     | |__| | \__ \ |_) | | (_| | |_| | | |  | | (_| | | | | |  ____) | (__| | |  __/  __/ | | |
 *     |_____/|_|___/ .__/|_|\__,_|\__, | |_|  |_|\__,_|_|_| |_| |_____/ \___|_|  \___|\___|_| |_|
 *                  | |             __/ |
 *                  |_|            |___/
 */
int setupScreenSaverTime = 0;
function displayMainScreen() {
	if (stateScreenDisplayed == FALSE) {
		cls_oled(OLED_WHITE);
		line_oled(0, 35, 127, 35, 2, 0);

		if(profileId == Profile1Enum) {
			print(centerX(sizeof(SPROFILE_1) - 1, OLED_FONT_MEDIUM_WIDTH),10,OLED_FONT_MEDIUM,OLED_BLACK,SPROFILE_1[0]);
		} else if(profileId == Profile2Enum) {
			print(centerX(sizeof(SPROFILE_2) - 1, OLED_FONT_MEDIUM_WIDTH),10,OLED_FONT_MEDIUM,OLED_BLACK,SPROFILE_2[0]);
		}
		screenDisplayed();
    }

	displayPressToOpenMenu();
}

/***
 *      _____  _           _                _____                          _     __  __           _    _____
 *     |  __ \(_)         | |              / ____|                        | |   |  \/  |         | |  / ____|
 *     | |  | |_ ___ _ __ | | __ _ _   _  | |    _   _ _ __ _ __ ___ _ __ | |_  | \  / | ___   __| | | (___   ___ _ __ ___  ___ _ __
 *     | |  | | / __| '_ \| |/ _` | | | | | |   | | | | '__| '__/ _ \ '_ \| __| | |\/| |/ _ \ / _` |  \___ \ / __| '__/ _ \/ _ \ '_ \
 *     | |__| | \__ \ |_) | | (_| | |_| | | |___| |_| | |  | | |  __/ | | | |_  | |  | | (_) | (_| |  ____) | (__| | |  __/  __/ | | |
 *     |_____/|_|___/ .__/|_|\__,_|\__, |  \_____\__,_|_|  |_|  \___|_| |_|\__| |_|  |_|\___/ \__,_| |_____/ \___|_|  \___|\___|_| |_|
 *                  | |             __/ |
 *                  |_|            |___/
 */
int xPos, currentModId, withModProfile;
function displayCurrentModScreen() {
	if(stateScreenDisplayed == FALSE) {
		currentModId = modId[currentMod];
	    xPos = centerX(getStringLength(addr(MODNAME[currentModId])), OLED_FONT_SMALL_WIDTH);
	    withModProfile = iif(currentMod == AntiRecoilEnum, TRUE, FALSE);
    	cls_oled(OLED_WHITE);
    	displayModScreen(xPos, OLED_FONT_SMALL, addr(MODNAME[currentModId]), getModToggleState(modId[currentMod]), withModProfile);
    	screenDisplayed();
    }
    setSetupScreenSaver();
}

/***
 *      _____  _           _               __  __           _
 *     |  __ \(_)         | |             |  \/  |         | |
 *     | |  | |_ ___ _ __ | | __ _ _   _  | \  / | ___   __| |
 *     | |  | | / __| '_ \| |/ _` | | | | | |\/| |/ _ \ / _` |
 *     | |__| | \__ \ |_) | | (_| | |_| | | |  | | (_) | (_| |
 *     |_____/|_|___/ .__/|_|\__,_|\__, | |_|  |_|\___/ \__,_|
 *                  | |             __/ |
 *                  |_|            |___/
 */
function displayModScreen(f_string, fSize, f_print, f_toggle, withProfile) {
	// Build Background
	displayMiddleLine(TRUE, TRUE, FALSE, FALSE, 0, 0, OLED_BLACK);

	// Display MOD_NAME
	print(f_string, 5, fSize, OLED_WHITE, f_print);

	// Display ON OFF
	if (f_print !=  addr( MODNAME[MiscEnum] )) {
	 	print(centerX(getStringLength(ONOFF[f_toggle]), OLED_FONT_LARGE_WIDTH) ,38,OLED_FONT_LARGE,OLED_BLACK,ONOFF[f_toggle]);
	} else {
		print(centerX(sizeof(RANDOMETEXT) - 1, OLED_FONT_SMALL_WIDTH ), 45, OLED_FONT_SMALL, OLED_BLACK, RANDOMETEXT[0] );
	}

	if (withProfile == 0) {
		displayMiddleLine(FALSE, FALSE, FALSE, FALSE, 0, 20, OLED_WHITE);
		print(centerX(sizeof(SNOPROFILE) - 1, OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_BLACK,SNOPROFILE[0]);
	} else if (withProfile == 1) {
		displayMiddleLine(FALSE, FALSE, TRUE, TRUE, 0, 20, OLED_WHITE);
		if (profileId == Profile1Enum) {
			print(centerX(sizeof(SPROFILE_1) - 1, OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_BLACK,SPROFILE_1[0]);
    	} else if(profileId == Profile2Enum) {
			print(centerX(sizeof(SPROFILE_2) - 1, OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_BLACK,SPROFILE_2[0]);
    	} else if(profileId == Profile3Enum) {
			print(centerX(sizeof(SPROFILE_3) - 1, OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_BLACK,SPROFILE_3[0]);
    	}
    }
    line_oled(0, 33, 127, 33 , 1, OLED_BLACK);
}

function setSetupScreenSaver() {
	handleButtonPression();
 	if (setupScreenSaverTime >= setupMenuscreenSaverTimer) { // if the timer is greater than or equal too
		setupScreenSaverTime = 0;
    	saveSPVAR();
    } else {
    	setupScreenSaverTime += get_rtime();
    }
}

// block display freshing
function screenDisplayed() {
	stateScreenDisplayed = TRUE;
}

// Allow display freshing
function resetDisplay() {
	stateScreenDisplayed = FALSE;
}


/***
 *      _____  _           _                _____       _       __  __           _
 *     |  __ \(_)         | |              / ____|     | |     |  \/  |         | |
 *     | |  | |_ ___ _ __ | | __ _ _   _  | (___  _   _| |__   | \  / | ___   __| |
 *     | |  | | / __| '_ \| |/ _` | | | |  \___ \| | | | '_ \  | |\/| |/ _ \ / _` |
 *     | |__| | \__ \ |_) | | (_| | |_| |  ____) | |_| | |_) | | |  | | (_) | (_| |
 *     |_____/|_|___/ .__/|_|\__,_|\__, | |_____/ \__,_|_.__/  |_|  |_|\___/ \__,_|
 *                  | |             __/ |
 *                  |_|            |___/
 */
 function displaySubModScreen(modMenu) {
    block_all_inputs();
    cls_oled(OLED_WHITE);
  	drawModTitle(modMenu);

	switch (modMenu) {
        case AntiRecoilEnum: {
 			renderAntiRecoilSubMenu();
            break;
        }
        case AimAssistRocketEnum: {
 			 renderAimAssistSubMenu();
            break;
        }
        case HoldBreathModEnum: {
 			 renderHoldBreathSubMenu();
            break;
        }
        case EnemyPingEnum: {
 			renderGenericSettingBar(modMenu, EnemyPingTimerTriggerEnum);
            break;
        }
        case RapidFireEnum: {
 			renderGenericSubMenu(modMenu, rapidFireShotsPerSecondEnum, rapidFireHoldTimeEnum);
            break;
        }
        case MiscEnum: {
 			renderMiscSubMenu(modMenu);
            break;
        }
    }
    setSetupScreenSaver();
    handleExitAndSave();
 }

 function renderGenericSettingBar(modMenu, settingIndex) {
     drawModTitle(modMenu);
     drawStandardSetting(settingIndex, FALSE);
     handleLeftRight(settingIndex);
 }

 function renderGenericSubMenu(modMenu, minEnum, maxEnum) {
     drawModTitle(modMenu);
     drawSettingLabel(currentSubCfg);
     drawStandardSetting(currentSubCfg, FALSE);
     handleLeftRight(currentSubCfg);
     handleUpDown(minEnum, maxEnum);
 }



 function handleLeftRight(settingIndex) {
     if (press_hold(XB1_LEFT)) {
         settings[settingIndex] = clamp(settings[settingIndex] - 1, settingMinMax[settingIndex][0], settingMinMax[settingIndex][1]);
     }
     if (press_hold(XB1_RIGHT)) {
         settings[settingIndex] = clamp(settings[settingIndex] + 1, settingMinMax[settingIndex][0], settingMinMax[settingIndex][1]);
     }
     }


 function handleUpDown(minEnum, maxEnum) {
     if (press_hold(XB1_UP)) {
         currentSubCfg--;
     }
     if (press_hold(XB1_DOWN)) {
         currentSubCfg++;
     }
     if (currentSubCfg > maxEnum) currentSubCfg = minEnum;
     else if (currentSubCfg < minEnum) currentSubCfg = maxEnum;
 }

 function renderHoldBreathSubMenu() {
     drawSettingLabel(currentSubCfg);
     drawStandardSetting(currentSubCfg, currentSubCfg == CooldownTimerEnum);
     handleLeftRight(currentSubCfg);
     handleUpDown(BreathTimerEnum, CooldownTimerEnum);
 }

function handleExitAndSave() {
    if (get_val(CROUCH_BTN) || event_press(CROUCH_BTN)) {
        saveSPVAR();
    }
}

function renderAntiRecoilSubMenu() {
    drawSettingLabel(currentSubCfg);

    switch (currentSubCfg) {
        case antiRecoilActivationEnum: {
            print(
                centerX(getStringLength(arActivation[settings[currentSubCfg]]), OLED_FONT_SMALL_WIDTH),
                45,
                OLED_FONT_SMALL,
                OLED_BLACK,
                arActivation[settings[currentSubCfg]]
            );
            break;
        }

        case antiRecoilVerticalEnum: {
            drawProgressBarWithCursor(
                15,
                40,
                100,
                10,
                antiRecoilVertical[profileId],
                settingMinMax[antiRecoilVerticalEnum][0],
                settingMinMax[antiRecoilVerticalEnum][1]
            );
            numberToString(
                antiRecoilVertical[profileId],
                findDigits(antiRecoilVertical[profileId]),
                OLED_FONT_SMALL,
                OLED_FONT_SMALL_WIDTH,
                cursor_position - 2,
                55,
                OLED_BLACK
            );
            break;
        }

        case antiRecoilHorizontalEnum: {
            drawProgressBarWithCursor(
                15,
                40,
                100,
                10,
                antiRecoilHorizontal[profileId],
                settingMinMax[antiRecoilHorizontalEnum][0],
                settingMinMax[antiRecoilHorizontalEnum][1]
            );
            numberToString(
                antiRecoilHorizontal[profileId],
                findDigits(antiRecoilHorizontal[profileId]),
                OLED_FONT_SMALL,
                OLED_FONT_SMALL_WIDTH,
                cursor_position - 2,
                55,
                OLED_BLACK
            );
            break;
        }
    }

    // Handle LEFT input
    if (press_hold(XB1_LEFT)) {
        switch (currentSubCfg) {
            case antiRecoilVerticalEnum: {
                antiRecoilVertical[profileId] = clamp(
                    antiRecoilVertical[profileId] - 1,
                    settingMinMax[currentSubCfg][0],
                    settingMinMax[currentSubCfg][1]
                );
                break;
            }
            case antiRecoilHorizontalEnum: {
                antiRecoilHorizontal[profileId] = clamp(
                    antiRecoilHorizontal[profileId] - 1,
                    settingMinMax[currentSubCfg][0],
                    settingMinMax[currentSubCfg][1]
                );
                break;
            }
            default {
                settings[currentSubCfg] = clamp(
                    settings[currentSubCfg] - 1,
                    settingMinMax[currentSubCfg][0],
                    settingMinMax[currentSubCfg][1]
                );
                break;
            }
        }
    }

    // Handle RIGHT input
    if (press_hold(XB1_RIGHT)) {
        switch (currentSubCfg) {
            case antiRecoilVerticalEnum: {
                antiRecoilVertical[profileId] = clamp(
                    antiRecoilVertical[profileId] + 1,
                    settingMinMax[currentSubCfg][0],
                    settingMinMax[currentSubCfg][1]
                );
                break;
            }
            case antiRecoilHorizontalEnum: {
                antiRecoilHorizontal[profileId] = clamp(
                    antiRecoilHorizontal[profileId] + 1,
                    settingMinMax[currentSubCfg][0],
                    settingMinMax[currentSubCfg][1]
                );
                break;
            }
            default {
                settings[currentSubCfg] = clamp(
                    settings[currentSubCfg] + 1,
                    settingMinMax[currentSubCfg][0],
                    settingMinMax[currentSubCfg][1]
                );
                break;
            }
        }
    }

    // Handle UP/DOWN input
    if (press_hold(XB1_UP) || press_hold(XB1_DOWN)) {
        currentSubCfg++;
    }

    // Wrap currentSubCfg between bounds
    if (currentSubCfg < antiRecoilVerticalEnum) {
        currentSubCfg = antiRecoilVerticalEnum;
    } else if (currentSubCfg > antiRecoilActivationEnum) {
        currentSubCfg = antiRecoilVerticalEnum;
    }
}

function renderAimAssistSubMenu() {
    drawSettingLabel(currentSubCfg);

    switch (currentSubCfg) {
        case AAShapeEnum: {
            print(
                centerX(getStringLength(SHAPES[aimAssistShape[profileId]]), OLED_FONT_MEDIUM_WIDTH),
                40,
                OLED_FONT_MEDIUM,
                OLED_BLACK,
                SHAPES[aimAssistShape[profileId]]
            );
            break;
        }

        case LeftShapeEnum: {
            print(
                centerX(getStringLength(AdsShapes[settings[LeftShapeEnum]]), OLED_FONT_MEDIUM_WIDTH),
                40,
                OLED_FONT_MEDIUM,
                OLED_BLACK,
                AdsShapes[settings[LeftShapeEnum]]
            );
            break;
        }

        case OutSideFocusEnum: {
            print(
                centerX(getStringLength(ONOFF[settings[currentSubCfg]]), OLED_FONT_MEDIUM_WIDTH),
                40,
                OLED_FONT_MEDIUM,
                OLED_BLACK,
                ONOFF[settings[currentSubCfg]]
            );
            break;
        }

        default {
            drawStandardSetting(currentSubCfg, FALSE);
            break;
        }
    }

    // Handle LEFT input
    if (press_hold(XB1_LEFT)) {
        switch (currentSubCfg) {
            case AAShapeEnum: {
            	// Limitation of the amount of shapes is wanted
                aimAssistShape[0] = iif(aimAssistShape[profileId] > 0, aimAssistShape[profileId] - 1, HelixEnum);
                aimAssistShape[1] = aimAssistShape[0];
                aimAssistShape[2] = aimAssistShape[0];
                break;
            }

            default {
                settings[currentSubCfg] = clamp(
                    settings[currentSubCfg] - 1,
                    settingMinMax[currentSubCfg][0],
                    settingMinMax[currentSubCfg][1]
                );
                break;
            }
        }
    }

    // Handle RIGHT input
    if (press_hold(XB1_RIGHT)) {
        switch (currentSubCfg) {
            case AAShapeEnum: {
            	// Limitation of the amount of shapes is wanted
                aimAssistShape[0] = iif(aimAssistShape[profileId] < HelixEnum, aimAssistShape[profileId] + 1, 0);
                aimAssistShape[1] = aimAssistShape[0];
                aimAssistShape[2] = aimAssistShape[0];
                break;
            }

            default {
                settings[currentSubCfg] = clamp(
                    settings[currentSubCfg] + 1,
                    settingMinMax[currentSubCfg][0],
                    settingMinMax[currentSubCfg][1]
                );
                break;
            }
        }
    }

    handleUpDown(LeftSizeEnum, AimLockStrengthEnum);
}

int miscStep;
function renderMiscSubMenu(modMenu) {
    drawModTitle(modMenu);
    print(centerX(getStringLength(SETTINGSAAP[currentSubCfg]), OLED_FONT_SMALL_WIDTH), 25, OLED_FONT_SMALL, OLED_BLACK, SETTINGSAAP[currentSubCfg]);
    switch (currentSubCfg) {
        case InvertEnum: {
            print(
                centerX(getStringLength(ONOFF[iif(settings[InvertEnum] == 1, 0, 1)]), OLED_FONT_MEDIUM_WIDTH),
                40,
                OLED_FONT_MEDIUM,
                OLED_BLACK,
                ONOFF[iif(settings[InvertEnum] == 1, 0, 1)]
            );
            break;
        }
        case NoRumbleEnum: {
            print(
                centerX(getStringLength(ONOFF[settings[NoRumbleEnum]]), OLED_FONT_MEDIUM_WIDTH),
                40,
                OLED_FONT_MEDIUM,
                OLED_BLACK,
                ONOFF[settings[NoRumbleEnum]]
            );
            break;
        }
        case buttonLayoutEnum: {
            print(
                centerX(getStringLength(BtnLayouts[settings[buttonLayoutEnum]]), OLED_FONT_SMALL_WIDTH),
                45,
                OLED_FONT_SMALL,
                OLED_BLACK,
                BtnLayouts[settings[buttonLayoutEnum]]
            );
            break;
        }
        case jumpShotProfile1Enum:{} // Ignore warnning same actions as BunnyHopEnum
        case jumpShotProfile2Enum:{} // Ignore warnning same actions as BunnyHopEnum
        case BunnyHopEnum: {
            print(
                centerX(getStringLength(ONOFF[settings[currentSubCfg]]), OLED_FONT_MEDIUM_WIDTH),
                40,
                OLED_FONT_MEDIUM,
                OLED_BLACK,
                ONOFF[settings[currentSubCfg]]
            );
            break;
        }
    }

    if (event_press(XB1_LEFT) || event_press(XB1_RIGHT)) {
        switch (currentSubCfg) {
            case InvertEnum: {
                settings[InvertEnum] = iif(settings[InvertEnum] == 1, -1, 1);
                blinkLedAndRumble();
                break;
            }
            case NoRumbleEnum: {
                settings[NoRumbleEnum] = !settings[NoRumbleEnum];
                blinkLedAndRumble();
                break;
            }
            case buttonLayoutEnum: {
                miscStep = iif(press_hold(XB1_LEFT), -1, 1);
                settings[buttonLayoutEnum] = clamp(settings[buttonLayoutEnum] + miscStep, 0, 21);
                setButtonsLayout(settings[buttonLayoutEnum]);
                break;
            }
            case jumpShotProfile1Enum: {} // Ignore warnning same actions as jumpShotProfile2Enum
            case jumpShotProfile2Enum: {
                settings[currentSubCfg] = !settings[currentSubCfg];
                blinkLedAndRumble();
                break;
            }
            case BunnyHopEnum: {
                settings[BunnyHopEnum] = !settings[BunnyHopEnum];
                blinkLedAndRumble();
                break;
            }
        }
    }

    handleUpDown(InvertEnum, BunnyHopEnum);
}

/***
 *      _____            __ _ _             ______               _   _
 *     |  __ \          / _(_) |           |  ____|             | | (_)
 *     | |__) | __ ___ | |_ _| | ___  ___  | |__ ___  _ __   ___| |_ _  ___  _ __  ___
 *     |  ___/ '__/ _ \|  _| | |/ _ \/ __| |  __/ _ \| '_ \ / __| __| |/ _ \| '_ \/ __|
 *     | |   | | | (_) | | | | |  __/\__ \ | | | (_) | | | | (__| |_| | (_) | | | \__ \
 *     |_|   |_|  \___/|_| |_|_|\___||___/ |_|  \___/|_| |_|\___|\__|_|\___/|_| |_|___/
 *
 */
function mainMenuProfileHandling() {
	if (event_press(XB1_RB)) {
		profileHandling(0);
	}

	if (event_press(XB1_LB)) {
		profileHandling(1)
	}
	 resetDisplay();
}

function profileHandling(action) {
	switch (action) {
		case 0: {
			profileId = clamp(profileId + 1, Profile1Enum, Profile2Enum);
			break;
		}
		case 1: {
			profileId = clamp(profileId - 1, Profile1Enum, Profile2Enum);
			break;
		}
	}

	if (profileId == Profile1Enum) {
		resetToProfile1();
	} else {
		resetToProfile2();
	}
}

function switchProfile() {
	if (profileId == Profile1Enum) {
		resetToProfile2();
	} else {
		resetToProfile1();
	}
	 resetDisplay();
}

function resetToProfile1() {
	profileId = Profile1Enum;
	currentLedColor = Red;
	SetLEDColor(currentLedColor);
}

function resetToProfile2() {
	profileId = Profile2Enum;
	currentLedColor = White;
	SetLEDColor(currentLedColor);
}

function handleUserOffSateInput() {
	if (get_val(XB1_LT) && event_release(XB1_VIEW)) {
	    combo_stop(DisplayDesactivated);
		tempState = STATE_RESTART;
		currentState = STATE_CLEAN_SCREEN;
	}
}


/***
 *      _    _                 _ _        _    _                 _____  _             _               _____                   _
 *     | |  | |               | | |      | |  | |               |  __ \| |           (_)             |_   _|                 | |
 *     | |__| | __ _ _ __   __| | | ___  | |  | |___  ___ _ __  | |__) | | __ _ _   _ _ _ __   __ _    | |  _ __  _ __  _   _| |_
 *     |  __  |/ _` | '_ \ / _` | |/ _ \ | |  | / __|/ _ \ '__| |  ___/| |/ _` | | | | | '_ \ / _` |   | | | '_ \| '_ \| | | | __|
 *     | |  | | (_| | | | | (_| | |  __/ | |__| \__ \  __/ |    | |    | | (_| | |_| | | | | | (_| |  _| |_| | | | |_) | |_| | |_
 *     |_|  |_|\__,_|_| |_|\__,_|_|\___|  \____/|___/\___|_|    |_|    |_|\__,_|\__, |_|_| |_|\__, | |_____|_| |_| .__/ \__,_|\__|
 *                                                                               __/ |         __/ |             | |
 *                                                                              |___/         |___/              |_|
 */
function handleUserPlayingSateInput() {



	if (get_val(XB1_LT) && event_release(XB1_VIEW)) {
		block_all_inputs();
	    tempState = STATE_OFF; // Open Setup menu
    	currentState = STATE_CLEAN_SCREEN;
	}

	if (get_val(XB1_LT) && get_val(XB1_MENU)) {
    	set_val(XB1_MENU, 0);
    	set_val(XB1_LT, 0);
    }

	if (get_val(XB1_LT) && event_release(XB1_MENU)) {
		block_all_inputs();
        tempState = STATE_SETUP_MENU; // Open Setup menu
    	currentState = STATE_CLEAN_SCREEN;
    }

    if (get_val(ADS_BTN) && get_val(XB1_LEFT)) {
    	set_val(XB1_LEFT, 0);
    }

   	if (get_val(ADS_BTN) && event_release(XB1_RIGHT)) {
   		combo_run(ToggleRapidFireStatus);
    	toggle[ToggleRapidFireEnum] = !toggle[ToggleRapidFireEnum];
    }

   	if (get_val(ADS_BTN) && event_release(XB1_LEFT)) {
   		quickToggleModId = AntiRecoilEnum;
   		tempState = STATE_QUICK_TOGGLE;
    	currentState = STATE_CLEAN_SCREEN;
    }

	if (get_val(XB1_VIEW)) {
		initScreenSaver();
		resetDisplay();
	}

	if(toggle[ToggleRapidFireEnum]) {
		rapidFire();
	}

	if(toggle[ToggleEnemyPingEnum]) {
		enemyPing();
	}

	if (toggleAutoRun) {
		if (!combo_running(AutoRun)) {
			combo_run(AutoRun);
		}
    }

	if (settings[NoRumbleEnum]) {
   		block_rumble();
	}

	// afk Loop
    if (toggleAntiAfk) {
		combo_run(AntiAfk);
    } else {
		combo_stop(AntiAfk);
    }

    if (toggle[HoldBreathEnum]) {
    	handleBreathTime();
	}

	if (profileId == Profile1Enum && settings[jumpShotProfile1Enum]) {
		bunnyHopToggle = TRUE;
	} else if (profileId == Profile2Enum && settings[jumpShotProfile2Enum]) {
		bunnyHopToggle = TRUE;
	} else {
		bunnyHopToggle = FALSE;
	}

	if(bunnyHopToggle) {
    	if (get_ptime(FIRE_BTN) > 200 && get_val(FIRE_BTN)) {
    		combo_run(BunnyHop);
    	}
	}

	if(settings[BunnyHopEnum]) {
    	if (get_ptime(JUMP_BTN) > 200 && get_val(JUMP_BTN)) {
    		combo_run(BunnyHop);
    	}
	}


	if (!get_val(XB1_VIEW) && event_release(SWITCHWEAPON_BTN)) {
		switchProfile();
	}

	if (get_val(XB1_VIEW) && get_val(SWITCHWEAPON_BTN)) {
		block(SWITCHWEAPON_BTN, 1000);
		block(XB1_VIEW, 1000);
		resetToProfile1();
		resetDisplay();
	}
	if (get_val(XB1_VIEW) && get_val(CROUCH_BTN)) {
		block(CROUCH_BTN, 1000);
		block(XB1_VIEW, 1000);
		resetToProfile2();
		resetDisplay();
	}


	isVibrating = isVibrating();
	if (toggleAntiRecoil[profileId] && isVibrating && !toggleAimAssistRocket) {
			legacyComboAntiRecoil();
	}

	if (toggleAimAssistRocket == TRUE) {
		aimAssistRocket();
		if (settings[OutSideFocusEnum] && event_release(ADS_BTN)) {
	        resetXY();
	    }
	}

}

/***
 *      __  __           _   _                 _
 *     |  \/  |         | | | |               (_)
 *     | \  / | ___   __| | | |     ___   __ _ _  ___
 *     | |\/| |/ _ \ / _` | | |    / _ \ / _` | |/ __|
 *     | |  | | (_) | (_| | | |___| (_) | (_| | | (__
 *     |_|  |_|\___/ \__,_| |______\___/ \__, |_|\___|
 *                                        __/ |
 *                                       |___/
 */

function legacyComboAntiRecoil() {
	if (antirecoilActivation(settings[antiRecoilActivationEnum])) {
		if (!combo_running(AntiRecoil)) {
			combo_run(AntiRecoil);
		}
	} else {
		if (combo_running(AntiRecoil)) {
			combo_stop(AntiRecoil);
		}
	}
}


function resetXY() {
	circleStep = 0;
	lsOffsetX = 0;
	lsOffsetY = 0;
}



int antiRecoilAds = FALSE;
int antiRecoilFire = FALSE;
function antirecoilActivation(setting) {
    antiRecoilAds = get_ival(ADS_BTN);
    antiRecoilFire = get_ival(FIRE_BTN);

    switch(setting) {
        case 0: {
            return (antiRecoilAds && antiRecoilFire);
        }
        case 1: {
            return (!antiRecoilAds && antiRecoilFire);
        }
        case 2: {
            return (antiRecoilAds && antiRecoilFire) || antiRecoilFire;
        }
    }
    return FALSE;
}

/***
 *      _    _       _     _   ____                 _   _       __  __           _
 *     | |  | |     | |   | | |  _ \               | | | |     |  \/  |         | |
 *     | |__| | ___ | | __| | | |_) |_ __ ___  __ _| |_| |__   | \  / | ___   __| |
 *     |  __  |/ _ \| |/ _` | |  _ <| '__/ _ \/ _` | __| '_ \  | |\/| |/ _ \ / _` |
 *     | |  | | (_) | | (_| | | |_) | | |  __/ (_| | |_| | | | | |  | | (_) | (_| |
 *     |_|  |_|\___/|_|\__,_| |____/|_|  \___|\__,_|\__|_| |_| |_|  |_|\___/ \__,_|
 *
 *
 */
function handleBreathTime() {
	BreathTime = settings[BreathTimerEnum] * 1000;
	StartBreathTime = settings[TimeBeforeBreathActivationEnum] * 1000;
	CooldownTime = settings[CooldownTimerEnum] * 100;

    // Ensure XB1_LS is only activated when XB1_LT or XB1_LS is used
    if (get_ival(ADS_BTN) || get_ival(SPRINT_BTN)) {
        if (!HoldBreathActive) {
            HoldBreathActive = TRUE;
            BreathTimer = 0;
            CooldownTimer = 0;
            StartTimer = 0;
            InitialActivation = TRUE; // Ensure StartBreathTime is applied only at the beginning
        }

        // Handle initial delay with StartBreathTime
        if (InitialActivation && StartTimer < StartBreathTime) {
            StartTimer += get_rtime();
        }
        // After initial delay, manage cycle with BreathTime and CooldownTime
        else if (BreathTimer < BreathTime) {
            set_val(SPRINT_BTN, 100); // Activate LS only when LT or LS is pressed
            BreathTimer += get_rtime();
            InitialActivation = FALSE; // Switch to normal cycle
        } else if (CooldownTimer < CooldownTime) {
            set_val(SPRINT_BTN, 0); // Stop holding breath during cooldown
            CooldownTimer += get_rtime();
        } else {
            // Reset timers for a new cycle
            BreathTimer = 0;
            CooldownTimer = 0;
        }
    } else {
        // If neither LT nor LS is pressed, reset everything and keep LS inactive
        HoldBreathActive = FALSE;
        BreathTimer = 0;
        CooldownTimer = 0;
        StartTimer = 0;
        InitialActivation = TRUE;
        set_val(SPRINT_BTN, 0); // Ensure LS is not activated when LT and LS are not in use
    }

    // Condition to stop HoldBreath if specific actions are detected
    if (get_ival(XB1_LY) < -90 && get_ival(ADS_BTN) && get_ptime(ADS_BTN) > 200) {
        HoldBreathActive = FALSE;
        BreathTimer = 0;
        CooldownTimer = 0;
        StartTimer = 0;
        InitialActivation = TRUE;
        set_val(SPRINT_BTN, 0); // Keep LS inactive when stopping HoldBreath
	}

	// Condition to restart a new cycle if needed
	if (event_press(ADS_BTN) ||
		(HoldBreathActive && !InitialActivation && BreathTimer >= BreathTime && CooldownTimer >= CooldownTime)) {
		BreathTimer = 0;
		CooldownTimer = 0;
		StartTimer = 0; // Reset timers for a new cycle
	}
}

/***
 *      ______                              _____ _               __  __           _
 *     |  ____|                            |  __ (_)             |  \/  |         | |
 *     | |__   _ __   ___ _ __ ___  _   _  | |__) | _ __   __ _  | \  / | ___   __| |
 *     |  __| | '_ \ / _ \ '_ ` _ \| | | | |  ___/ | '_ \ / _` | | |\/| |/ _ \ / _` |
 *     | |____| | | |  __/ | | | | | |_| | | |   | | | | | (_| | | |  | | (_) | (_| |
 *     |______|_| |_|\___|_| |_| |_|\__, | |_|   |_|_| |_|\__, | |_|  |_|\___/ \__,_|
 *                                   __/ |                 __/ |
 *                                  |___/                 |___/
 */
function enemyPing() {
    enemyPingTime = settings[EnemyPingTimerTriggerEnum];

    // If RT or LT is pressed, start counting the time
    if (get_ival(FIRE_BTN)) {
        EnemyPingTimer += get_rtime(); // Increment time using runtime function
		 // Keep LS inactive when stopping HoldBreath
        if (EnemyPingTimer / 1000 >= enemyPingTime) {
            if (!combo_running(ComboEnemyPing)) {
                combo_run(ComboEnemyPing);
            }
        }
    } else {
        // Reset timer when no relevant input is detected
        EnemyPingTimer = 0;
        if (combo_running(ComboEnemyPing)) {
            combo_stop(ComboEnemyPing);
        }
    }
}

/***
 *               _                              _     _     _____            _        _     __  __           _
 *         /\   (_)               /\           (_)   | |   |  __ \          | |      | |   |  \/  |         | |
 *        /  \   _ _ __ ___      /  \   ___ ___ _ ___| |_  | |__) |___   ___| | _____| |_  | \  / | ___   __| |
 *       / /\ \ | | '_ ` _ \    / /\ \ / __/ __| / __| __| |  _  // _ \ / __| |/ / _ \ __| | |\/| |/ _ \ / _` |
 *      / ____ \| | | | | | |  / ____ \\__ \__ \ \__ \ |_  | | \ \ (_) | (__|   <  __/ |_  | |  | | (_) | (_| |
 *     /_/    \_\_|_| |_| |_| /_/    \_\___/___/_|___/\__| |_|  \_\___/ \___|_|\_\___|\__| |_|  |_|\___/ \__,_|
 *
 *
 */
int boostStrength;
int activationRangeMin, activationRangeMax;
int inActivationRange;
int antiRecoilY = 0;
int antiRecoilX = 0;
int isVibrating;

function aimAssistRocket() {

    activationRangeMin = settings[activationRangeMinEnum];
    activationRangeMax = settings[activationRangeMaxEnum];
    boostStrength = settings[boostStrengthEnum] / 10;

    RX = get_val(XB1_RX);
    RY = get_val(XB1_RY);
    actual_Magnitude = isqrt(pow(RX, 2) + pow(RY, 2));
    max_Magnitude = (actual_Magnitude < 100);

	isVibrating = isVibrating();

    updateAngle();

    // Calcul de l'anti-recul vertical
    if (antirecoilActivation(settings[antiRecoilActivationEnum])  == TRUE) {
    	antiRecoilY = calculateAntiRecoilYVibrating();
    	antiRecoilX = calculateAntiRecoilXVibrating();
	} else {
		antiRecoilY =  0;
		antiRecoilX =  0;
	}

	adjustAngleValues();
    handleActivation();
}

int adjustment;
function outputV2(stick, value) {
    adjustment = (value * 327);
    set_val(stick, clamp(get_val(stick) + adjustment, -32767, 32767) * settings[InvertEnum]);
}

function output(stick, value) {
	set_val(stick, clamp(value * (32767 - abs(get_val(stick))) / 32768 + get_val(stick), -32768, 32767));
}

function offsetAR(Stick,Value) {
  set_val(Stick, clamp(Value * (100 - abs(get_val(Stick))) / 100 + get_val(Stick) * settings[InvertEnum], -100, 100));
  return;
}

const int16 cosTableBox[] = {100, 71, 0,-71, -100,-71,0, 71};
const int16 sinTableBox[] = {0,71, 100, 71, 0, -71, -100, -71 };

function updateAngle() {
    if (!(time++ % 1)) {
    	if( settings[OutSideFocusEnum] && get_val(ADS_BTN) && get_val(FIRE_BTN) == 0 && settings[AdsRightSpeedEnum] > 0 ) {
    		angle += settings[AdsRightSpeedEnum];
    	} else {
        	angle += settings[RightSpeedEnum];
        }
    }

    sin_angle = sin(angle)  / 200;
    cos_angle = cos(angle) / 200;
}

function handleActivation() {
    if (event_release(FIRE_BTN) || event_release(ADS_BTN)) {
    	resetXY();
        resetAngleAndCombo();
    }
    // New Change Bytes optimization
    if (isAimingActive()) {
        handleAimAssist();
    }
}

function resetAngleAndCombo() {
    angle = 0;
    combo_stop(LeftStickAimAssistRocket);
}

function isAimingActive() {
    return ( settings[OutSideFocusEnum] && get_val(ADS_BTN) ||  (get_ival(ADS_BTN) && get_ival(FIRE_BTN)) || get_ival(FIRE_BTN) );
}

const int16 cosTableCircle[] = {
  100, 98, 92, 83, 71, 56, 38, 20,
  0, -20, -38, -56, -71, -83, -92, -98,
  -100, -98, -92, -83, -71, -56, -38, -20,
  0, 20, 38, 56, 71, 83, 92, 98,
  100, 98, 92, 83, 71, 56, 38, 20,
  0, -20, -38, -56, -71, -83, -92, -98,
  -100, -98, -92, -83, -71, -56, -38, -20,
  0, 20, 38, 56, 71, 83, 92, 98
};

const int16 sinTableCircle[] = {
  0, 20, 38, 56, 71, 83, 92, 98,
  100, 98, 92, 83, 71, 56, 38, 20,
  0, -20, -38, -56, -71, -83, -92, -98,
  -100, -98, -92, -83, -71, -56, -38, -20,
  0, 20, 38, 56, 71, 83, 92, 98,
  100, 98, 92, 83, 71, 56, 38, 20,
  0, -20, -38, -56, -71, -83, -92, -98,
  -100, -98, -92, -83, -71, -56, -38, -20
};


function isLeftLegacyAimAssistActivated() {
	if (  get_val(ADS_BTN) > 0 && get_val(FIRE_BTN) > 0 && settings[LeftSpeedEnum] > 0) {
		return TRUE;
	}
	return FALSE;
}


function isLeftAdsAimAssistActivated() {
	if (settings[OutSideFocusEnum] && (( get_val(ADS_BTN) > 0 && get_val(FIRE_BTN) == 0) ) && settings[AdsLeftSpeedEnum] > 0) {
		return TRUE;
	}
	return FALSE;
}

function isRightAdsAimAssistActivated() {
	if (settings[OutSideFocusEnum] && (( get_val(ADS_BTN) > 0 && get_val(FIRE_BTN) == 0) ) && settings[AdsRightSpeedEnum] > 0) {
		return TRUE;
	}
	return FALSE;
}

int lsOffsetX, lsOffsetY, circleStep, angle_rx, angle_ry;
int leftStickDelayCounter = 0;
int leftStickDelayThreshold = 10;

function handleAimAssist() {
    switch (settings[LeftShapeEnum]) {
        case LeftRightEnum: {
            if (!combo_running(LeftStickAimAssistRocket)) {
                combo_run(LeftStickAimAssistRocket);
            }
            break;
        }
    }

    inActivationRange = isInActivationRange();

    if (isRightAdsAimAssistActivated() ) {
    	getShapes(settings[AdsRightSizeEnum]);
    } else {
    	getShapes(settings[RightSizeEnum]);
    }

    angle_rx = cos_angle;
    angle_ry = sin_angle;

    if (inActivationRange) {
        applyBoostedOutput();
    } else {
        applyNormalOutput();
    }
}

function isInActivationRange() {
    return (abs(RX) > activationRangeMin || abs(RY) > activationRangeMin) &&
           (abs(RX) < activationRangeMax || abs(RY) < activationRangeMax);
}

int hsHelper;
function applyBoostedOutput() {
    outputV2(POLAR_RX, boostStrength * angle_rx + antiRecoilX );
	if (antirecoilActivation(settings[antiRecoilActivationEnum]) == TRUE) {

			outputV2(POLAR_RY, boostStrength * angle_ry + antiRecoilY);

	} else {
		outputV2(POLAR_RY, boostStrength * angle_ry);
	}
}

function applyNormalOutput() {
    outputV2(POLAR_RX, angle_rx + antiRecoilX );
    if (antirecoilActivation(settings[antiRecoilActivationEnum])  == TRUE) {
			outputV2(POLAR_RY, angle_ry + antiRecoilY);
	} else {
		outputV2(POLAR_RY, angle_ry);
	}
}

function calculateAntiRecoilYVibrating() {
	if ( toggleAntiRecoil[profileId] == 1 && antiRecoilVertical[profileId]) {
		return antiRecoilVertical[profileId];
	}
	return 0;
}

function calculateAntiRecoilXVibrating() {
    if ( toggleAntiRecoil[profileId] == 1 && antiRecoilHorizontal[profileId]) {
        return antiRecoilHorizontal[profileId];
    }
	return 0;
}


int new_sin_angle, new_cos_angle;
int adjustmentFactor;

int aimStrength;
function adjustAngleValues() {
    if (actual_Magnitude <= settings[RightSizeEnum]) {
        new_sin_angle = sin_angle - RY;
        new_cos_angle = cos_angle - RX;
    } else {
        adjustmentFactor = (200 - ((abs(RY) + actual_Magnitude) / 10) * 10) / 200;
        new_sin_angle = (sin_angle * adjustmentFactor) * max_Magnitude;
        new_cos_angle = (cos_angle * adjustmentFactor) * max_Magnitude;
    }

    // Apply aim lock if enabled
    aimStrength = settings[AimLockStrengthEnum]; // Adjustable aim lock strength

    // Adjust aim assist values dynamically
    new_sin_angle -= (RY * aimStrength / 100);
    new_cos_angle -= (RX * aimStrength / 100);

    sin_angle = (sin_angle * 100 ) / 100 + new_sin_angle  / 100;
    cos_angle = (cos_angle * 100 ) / 100 + new_cos_angle  / 100;
}

int rapidFireHoldTime, rapidFireRestTime;
int currentShotsPerSec;
int totalCycleTime;
function rapidFire() {
	currentShotsPerSec = settings[rapidFireShotsPerSecondEnum];
    // Calculate hold and rest times based on shots per second
    rapidFireHoldTime = settings[rapidFireHoldTimeEnum];

    // If hold time is not explicitly set, calculate it automatically
	if (rapidFireHoldTime <= 0) {
        rapidFireHoldTime = totalCycleTime / 2;
    }

    // Calculate rest time to maintain consistent firing rate
    totalCycleTime = 1000 / currentShotsPerSec; // total time per shot cycle (ms)
    rapidFireRestTime = totalCycleTime - rapidFireHoldTime;

    // Run or stop the RapidFire combo based on activation type
	if(antirecoilActivation(settings[antiRecoilActivationEnum])  == TRUE) {
		combo_run(RapidFire);
	} else {
		combo_stop(RapidFire);
	}
}



/***
 *      _______          _               _____ _                             _____            _     _ _           _
 *     |__   __|        | |             / ____| |                           |  __ \          (_)   (_) |         | |
 *        | | __ _ _   _| | ___  _ __  | (___ | |__   __ _ _ __   ___  ___  | |__) |_____   ___ ___ _| |_ ___  __| |
 *        | |/ _` | | | | |/ _ \| '__|  \___ \| '_ \ / _` | '_ \ / _ \/ __| |  _  // _ \ \ / / / __| | __/ _ \/ _` |
 *        | | (_| | |_| | | (_) | |     ____) | | | | (_| | |_) |  __/\__ \ | | \ \  __/\ V /| \__ \ | ||  __/ (_| |
 *        |_|\__,_|\__, |_|\___/|_|    |_____/|_| |_|\__,_| .__/ \___||___/ |_|  \_\___| \_/ |_|___/_|\__\___|\__,_|
 *                  __/ |                                 | |
 *                 |___/                                  |_|
 */
int time;
int RX, RY;
int cos_angle, sin_angle;
int SpiralPosition1,SpiralPosition2,InnerSpiral,OuterSpiral;
int actual_Magnitude, max_Magnitude, Position;
int ReverseLoopDirection, hexaStep;
int timer;
function getShapes(f_var) {

     // Spiral Position Update Logic
    if (!SpiralPosition1) {
        InnerSpiral -= 1;
        if (InnerSpiral < 1)
            SpiralPosition1 = TRUE;
    } else {
        InnerSpiral += 1;
        if (InnerSpiral > f_var)
            SpiralPosition1 = FALSE;
    }

    if (!SpiralPosition2) {
        OuterSpiral -= 1;
        if (OuterSpiral < 1)
            SpiralPosition2 = TRUE;
    } else {
        OuterSpiral += 1;
        if (OuterSpiral > f_var)
            SpiralPosition2 = FALSE;
    }


    // Main shape logic using switch
    switch (aimAssistShape[profileId]) {

        case CircularEnum: {
            RY = (sin_angle * f_var) / 100;
            RX = (cos_angle * f_var) / 100;
            break;
        }

        case TallOvalEnum: {
            RY = (sin_angle * f_var) / 100;
            RX = (cos_angle * (f_var / 2)) / 100;
            break;
        }

        case WideOvalEnum: {
            RY = (sin_angle * (f_var / 2)) / 100;
            RX = (cos_angle * f_var) / 100;
            break;
        }

        case SpiralEnum: {
            RY = (sin_angle * InnerSpiral) / 100;
            RX = (cos_angle * OuterSpiral) / 100;
            break;
        }

        case HelixEnum: {
            RX = (cos_angle * Position) / 100;
            RY = (sin_angle * Position) / 100;

            if (Position == 0)
                RX = (cos_angle * f_var) / 100;
            if (Position == 1)
                RY = (sin_angle * f_var) / 100;
            if (Position == 2)
                RX = (cos_angle * f_var) / 100 * -1;
            if (Position == 3)
                RY = (sin_angle * f_var) / 100 * -1;

            timer++;
            if (!settings[OutSideFocusEnum] && timer >= settings[RightSpeedEnum]) {
                Position++;
                timer = 0;
            } else if (settings[OutSideFocusEnum] && timer >= settings[AdsRightSpeedEnum]) {
                Position++;
                timer = 0;
            }
            if (Position == 4)
                Position = 0;
            break;
        }
    }

    // Store new angles back into the base values
    cos_angle = RX;
    sin_angle = RY;
}

/***
 *     __      __  _     _            _        __  __           _
 *     \ \    / / | |   (_)          | |      |  \/  |         | |
 *      \ \  / /__| |__  _  ___ _   _| | ___  | \  / | ___   __| |
 *       \ \/ / _ \ '_ \| |/ __| | | | |/ _ \ | |\/| |/ _ \ / _` |
 *        \  /  __/ | | | | (__| |_| | |  __/ | |  | | (_) | (_| |
 *         \/ \___|_| |_|_|\___|\__,_|_|\___| |_|  |_|\___/ \__,_|
 *
 *
 */

/***
 *      _    _ _   _ _
 *     | |  | | | (_) |
 *     | |  | | |_ _| |___
 *     | |  | | __| | / __|
 *     | |__| | |_| | \__ \
 *      \____/ \__|_|_|___/
 *
 *
 */

// (Made By Batts)
function centerX(f_chars,f_font) {
//  centerX(number of chars,font size);
//	return X for Centering String Horizontally
    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}


// (Made By Batts)
function centerY(f_size) {
//  centerY(font size);
//	return Y for Centering String Vertically

    return (OLED_HEIGHT  / 2) - (f_size / 2);
}

function SetLEDColor(color) {
	set_hsb(Color[color][Hue], Color[color][Saturation], Color[color][Brightness]);
}
// Credit to Swizzy
int stringLength;
function getStringLength(offset) {
    stringLength = 0;
    do {
        offset++;
        stringLength++;
    } while (duint8(offset));
    return stringLength;
}

// Alternative for the ternary operator
function iif(expression, truepart, falsepart) {
	// evaluate if expression is true
	if (expression) {
		return truepart; // Return truepart
	}

	// Else, return falsepart
	return falsepart;
}

function blinkLedAndRumble() {
        set_ledx(3, 3);
        resetBlinkLedAndRumble();
}

function resetBlinkLedAndRumble() {
	if(!get_ledx()) { // If the leds are not blinking...
		SetLEDColor(currentLedColor);
    }
}

function handleButtonPression() {
 	if (
        get_ival(FIRE_BTN) ||
        get_ival(ADS_BTN) ||
        get_ival(LETHAL_BTN) ||
        get_ival(TACTICAL_BTN) ||
        get_ival(JUMP_BTN) ||
        get_ival(CROUCH_BTN) ||
        get_ival(MELEE_BTN) ||
        get_ival(SPRINT_BTN) ||
        get_ival(RELOAD_BTN) ||
        get_ival(SWITCHWEAPON_BTN) ||
        get_ival(PING_BTN) ||
        get_ival(XB1_UP) ||
        get_ival(XB1_DOWN) ||
        get_ival(XB1_LEFT) ||
        get_ival(XB1_RIGHT)
    ) {
        setupScreenSaverTime = 0;
    }
}

int bufferIndex,digitIndex,charIndex ;
function numberToString(f_val,f_digits, fontSize, fontSizeWidth, xPosition, yPosition, color) {
    bufferIndex = 1;
    digitIndex = 10000;
    if(f_val < 0) {
         putc_oled(bufferIndex,45);
         bufferIndex += 1;
         f_val = abs(f_val);
    }
    for(charIndex = 5; charIndex >= 1; charIndex--) {
        if(f_digits >= charIndex) {
            putc_oled(bufferIndex,(f_val / digitIndex) + 48);
            f_val %= digitIndex;
            bufferIndex ++;
            if(charIndex == 4) {
                putc_oled(bufferIndex,44);
                bufferIndex ++;
            }
        }
        digitIndex /= 10;
    }
    puts_oled(iif(xPosition > 127, centerX(bufferIndex - 1, fontSizeWidth), xPosition) , yPosition, fontSize, bufferIndex - 1,color);
 }


// Credit to JBaze122
int logVal;
function findDigits(num) {
   logVal = 0;
   do {
      num /= 10;
      logVal++;
   } while (num);
   return logVal;
}

function press_hold(f_btn) {
    //  return TRUE - event_press()
    //  - every 250 ms when button is held

    return event_press(f_btn) || (get_ival(f_btn) && get_ptime(f_btn) >= 500);
    //&& get_ptime(f_btn) % (get_rtime() * 8) == 0;
}

function correctAngle(angle) {
  if (angle < 0) angle = 360 + (angle % 360);
  angle = (angle + 90) % 360;
  return angle;
}

 function sin(angle) {
   return lerp_16(pollarArr[(correctAngle(angle - 1))], pollarArr[(correctAngle(angle + 1))], 0x8000);
 }
 function cos(angle) {
   return lerp_16(pollarArr[((correctAngle(angle - 1) + 90) % 360)],  pollarArr[((correctAngle(angle + 1) + 90) % 360)], 0x8000);
 }
 function lerp_16(a, b, t) { return fix_to_int(lerp(int_to_fix(a), int_to_fix(b), t)); }
 function int_to_fix(a) { return a * 0x10000; }
 function fix_to_int(a) { if (a >= 0) return (a + 0x10000 >> 1) / 0x10000; return (a - 0x10000 >> 1) / 0x10000; }
 function fix_mul(v1, v2) { return ((v1 >> 8) * (v2 >> 8)); }
 function lerp(a, b, f) { return fix_mul((0x10000 - f), a) + fix_mul(f, b); }

 int rumble_a, rumble_b;
 function rumbleToUse() {
     rumble_a = get_rumble(RUMBLE_A);
     rumble_b = get_rumble(RUMBLE_B);
     if(rumble_a == rumble_b)
     {
         return RUMBLE_A;
     }
     if(rumble_a == 100)
     {
         return RUMBLE_B;
     }
     if(rumble_b == 100)
     {
         return RUMBLE_A;
     }
     if(rumble_a > rumble_b)
     {
         return RUMBLE_A;
     }
     return RUMBLE_B;
 }

 function isVibrating() {
 	return TRUE;
 }

 /***
  *       _____      _    __      __          ____                   _______ _
  *      / ____|    | |   \ \    / /         |  _ \                 |__   __(_)
  *     | (___   ___| |_   \ \  / / __ ___   | |_) | __ _ ___  ___     | |   _ _ __ ___   ___
  *      \___ \ / _ \ __|   \ \/ / '_ ` _ \  |  _ < / _` / __|/ _ \    | |  | | '_ ` _ \ / _ \
  *      ____) |  __/ |_     \  /| | | | | | | |_) | (_| \__ \  __/    | |  | | | | | | |  __/
  *     |_____/ \___|\__|     \/ |_| |_| |_| |____/ \__,_|___/\___|    |_|  |_|_| |_| |_|\___|
  *
  *
  */
 function setVmBaseTime() {
 	vm_tctrl(8 - 10);
 }

 /***
  *       _____      _     ____        _   _                    _                             _
  *      / ____|    | |   |  _ \      | | | |                  | |                           | |
  *     | (___   ___| |_  | |_) |_   _| |_| |_ ___  _ __  ___  | |     __ _ _   _  ___  _   _| |_
  *      \___ \ / _ \ __| |  _ <| | | | __| __/ _ \| '_ \/ __| | |    / _` | | | |/ _ \| | | | __|
  *      ____) |  __/ |_  | |_) | |_| | |_| || (_) | | | \__ \ | |___| (_| | |_| | (_) | |_| | |_
  *     |_____/ \___|\__| |____/ \__,_|\__|\__\___/|_| |_|___/ |______\__,_|\__, |\___/ \__,_|\__|                                                                     |___/
  */
   const uint8 Layouts[][] = {
  // 		Fire  ,  ADS  , Grenade,  ,Jump   , Crouch , Melee  , Sprint , Reload , Swap   Ping    Tactical  Heal     Inspect
     {  XB1_RT , XB1_LT , XB1_RIGHT ,XB1_A  , XB1_B  , XB1_RS , XB1_LS , XB1_X , XB1_Y  , XB1_RB, XB1_LB,  PS4_UP,  PS4_LEFT},  // 0 - Default
     {  XB1_RT , XB1_LT , XB1_RIGHT ,XB1_LB , XB1_RS , XB1_B  , XB1_LS , XB1_X , XB1_Y  , XB1_RB, XB1_A ,  PS4_UP,  PS4_LEFT},  // 1 - Evolved
     {  XB1_LT , XB1_RT , XB1_RB    ,XB1_A  , XB1_B  , XB1_RS , XB1_LS , XB1_X , XB1_Y  , XB1_RB, XB1_LB,  PS4_UP,  PS4_LEFT},  // 2 - Default Swapped Triggers
     {  XB1_RT , XB1_LT , XB1_RIGHT ,XB1_LB , XB1_B  , XB1_RS , XB1_LS , XB1_X , XB1_Y  , XB1_RB, XB1_A ,  PS4_UP,  PS4_LEFT},  // 3 - Bumper Jumper
     {  XB1_RT , XB1_LT , XB1_RIGHT ,XB1_A  , XB1_RS , XB1_B  , XB1_LS , XB1_X , XB1_Y  , XB1_RB, XB1_LB,  PS4_UP,  PS4_LEFT},  // 4 - Button Puncher
     {  XB1_RT , XB1_LT , XB1_RB    ,XB1_A  , XB1_B  , XB1_RS , XB1_LS , XB1_X , XB1_Y  , XB1_UP, XB1_LB,  PS4_UP,  PS4_LEFT},  // 5 - Grenadier
     {  XB1_RT , XB1_LT , XB1_RIGHT ,XB1_LB , XB1_RB , XB1_RS , XB1_LS , XB1_X , XB1_Y  , XB1_A , XB1_B ,  PS4_UP,  PS4_LEFT}  // 6 - Ninja
  };

 function setButtonsLayout(Type) {
 	FIRE_BTN = Layouts[Type][0];
 	ADS_BTN = Layouts[Type][1];
 	LETHAL_BTN = Layouts[Type][2];
 	JUMP_BTN = Layouts[Type][3];
 	CROUCH_BTN = Layouts[Type][4];
    MELEE_BTN = Layouts[Type][5];
    SPRINT_BTN = Layouts[Type][6];
    RELOAD_BTN = Layouts[Type][7];
    SWITCHWEAPON_BTN = Layouts[Type][8];
    PING_BTN = Layouts[Type][9];
    TACTICAL_BTN = Layouts[Type][10];
 }


/***
 *       _____                _
 *      / ____|              | |
 *     | |     ___  _ __ ___ | |__   ___  ___
 *     | |    / _ \| '_ ` _ \| '_ \ / _ \/ __|
 *     | |___| (_) | | | | | | |_) | (_) \__ \
 *      \_____\___/|_| |_| |_|_.__/ \___/|___/
 *
 */

fcombo AntiAfk {
    set_val(PS5_LY, -100);
    wait(2000);
    set_val(PS5_LY, 0);
    wait(100);

    set_val(PS5_LY, 100);
    wait(2000);
    set_val(PS5_LY, 0);
    wait(100);
    set_val(ADS_BTN, 100);
    set_val(FIRE_BTN, 100);
    wait(2000);

    set_val(FIRE_BTN, 0);
    wait(2000);

    set_val(ADS_BTN, 0);
    wait(100);

    set_val(RELOAD_BTN, 100);
    wait(200);
    set_val(RELOAD_BTN, 0);
    wait(300);
}

fcombo AntiRecoil {
    // Vertical
    comboAntiRecoilVertical = get_val(XB1_RY) + antiRecoilVertical[profileId];
    if(comboAntiRecoilVertical > 100) {
    	comboAntiRecoilVertical = 100;
	}
    if (abs(get_val(XB1_RY)) < abs( antiRecoilVertical[profileId])) {
    	set_val(XB1_RY, (comboAntiRecoilVertical * settings[InvertEnum]));
   	}
    // Horizontal
    comboAntiRecoilHorizontal = get_val(XB1_RX) + antiRecoilHorizontal[profileId];

   	if(comboAntiRecoilHorizontal > 100) {
    	comboAntiRecoilHorizontal = 100;
	}

    if(abs(get_val(XB1_RX)) < abs(comboAntiRecoilHorizontal[profileId])) {
    	set_val(XB1_RX, comboAntiRecoilHorizontal);
	}
}

fcombo AutoRun {
	if(
		(isqrt(pow(abs(get_ival(XB1_LX)),2) + pow(abs(get_ival(XB1_LY)),2)) >= 90)
		&& get_ival(XB1_LY) < 20
		&& !get_val(ADS_BTN)
		&& !get_val(FIRE_BTN)
		) {
		set_val(SPRINT_BTN, 100);
	}
}

fcombo BunnyHop {
    set_val(JUMP_BTN,100);
    wait(50);
    set_val(JUMP_BTN,0);
    wait(50);
}

int frame=0;
const uint8 introN[] = { 82, 111, 99, 107, 101, 116, 65, 73, 77, 32, 66, 70, 54, 0 };
const uint8 introV[] = { 118, 58, 49, 46, 48, 0 };

fcombo ComboDisplayIntro {
	wait(50);
	image_oled(0, 0, TRUE, TRUE, Frames[frame]);
	print(centerX(sizeof(introN) - 1, OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,addr(introN));
	print(40,50,OLED_FONT_SMALL,OLED_WHITE,addr(introV));
	frame ++;
}

fcombo ComboEnemyPing {
	set_val(PING_BTN,100);
	wait(20);
	set_val(PING_BTN,0);
	wait(20);
	set_val(PING_BTN,100);
	wait(20);
	set_val(PING_BTN,0);
	wait(2000);
}


fcombo DisplayDesactivated {
	currentLedColor = Black;
	SetLEDColor(currentLedColor);
	print(centerX(getStringLength(ONOFF[0]), OLED_FONT_LARGE_WIDTH),15,OLED_FONT_LARGE,OLED_WHITE,ONOFF[0]);
	wait(2000);
}

fcombo LeftStickAimAssistRocket {
	output(POLAR_LX, settings[LeftSizeEnum] * 327);
	wait(settings[LeftSpeedEnum]);
	output(POLAR_LX, inv(settings[LeftSizeEnum] * 327) );
	wait(settings[LeftSpeedEnum]);
}

fcombo LeftStickAimAssistCircle {
    set_val(XB1_LX, clamp(get_val(XB1_LX) + lsOffsetX, -100, 100));
    set_val(XB1_LY, clamp(get_val(XB1_LY) + lsOffsetY, -100, 100));
}

fcombo LeftStickAimAssistAds {
    set_val(XB1_LX, clamp(get_val(XB1_LX) + lsOffsetX, -100, 100));
    set_val(XB1_LY, clamp(get_val(XB1_LY) + lsOffsetY, -100, 100));
}

fcombo RapidFire {
	wait(rapidFireHoldTime);
	set_val(FIRE_BTN, 0);
	wait(rapidFireRestTime);
}

fcombo Save {
	cls_oled(0);
   	print(centerX(sizeof(DSAVED) - 1,OLED_FONT_LARGE_WIDTH),centerY(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,DSAVED[0]);
	wait(1500);
	resetDisplay();
}


fcombo ToggleRapidFireStatus {
    // Optimization Swizzy
    // if (combo_current_step_time_left(ToggleRapidFireStatus) <= 0)  {
        rect_oled(10, 10, 110, 50 ,1, 0);
    	print(centerX(getStringLength( addr(MODNAME[RapidFireEnum])) , OLED_FONT_SMALL_WIDTH), 20, OLED_FONT_SMALL, OLED_WHITE, addr(MODNAME[RapidFireEnum]) );
    	print(centerX(getStringLength(ONOFF[toggle[ToggleRapidFireEnum]]), OLED_FONT_LARGE_WIDTH) ,30,OLED_FONT_LARGE,OLED_WHITE,ONOFF[toggle[ToggleRapidFireEnum]]);
    //}
	wait(1000);

	if (currentState == STATE_SCREEN_SAVER) {
		tempState = STATE_SCREEN_SAVER;
		previousState = STATE_SCREEN_SAVER;
	} else {
		tempState = STATE_PLAYING;
	}
	currentState = STATE_CLEAN_SCREEN;
}

/***
 *      ____  _
 *     |  _ \(_)           /\
 *     | |_) |_  __ _     /  \   _ __ _ __ __ _ _   _ ___
 *     |  _ <| |/ _` |   / /\ \ | '__| '__/ _` | | | / __|
 *     | |_) | | (_| |  / ____ \| |  | | | (_| | |_| \__ \
 *     |____/|_|\__, | /_/    \_\_|  |_|  \__,_|\__, |___/
 *               __/ |                           __/ |
 *              |___/                           |___/
 */



const int16 pollarArr[] = { 23170,  23167,  23156,  23139,  23114,  23082,  23044,  22998,  22945,  22885,  22818,  22745,  22664,  22577,  22482,  22381,  22273,  22158,  22036,  21908,  21773,  21632,  21483,  21329,  21167,  21000,  20825,  20645,  20458,  20265,  20066,  19861,  19650,  19432,  19209,  18980,  18745,  18505,  18259,  18007,  17750,  17487,  17219,  16946,  16667,  16384,  16096,  15802,  15504,  15201,  14894,  14582,  14265,  13944,  13619,  13290,  12957,  12620,  12278,  11934,  11585,  11233,  10878,  10519,  10157,  9792,  9424,  9053,  8680,  8304,  7925,  7544,  7160,  6774,  6387,  5997,  5605,  5212,  4817,  4421,  4024,  3625,  3225,  2824,  2422,  2019,  1616,  1213,  809,  404,  00,  -404,  -809,  -1213,  -1616,  -2019,  -2422,  -2824,  -3225,  -3625,  -4024,  -4421,  -4817,  -5212,  -5605,  -5997,  -6387,  -6774,  -7160,  -7544,  -7925,  -8304,  -8680,  -9053,  -9424,  -9792,  -10157,  -10519,  -10878,  -11233,  -11585,  -11934,  -12278,  -12620,  -12957,  -13290,  -13619,  -13944,  -14265,  -14582,  -14894,  -15201,  -15504,  -15802,  -16096,  -16384,  -16667,  -16946,  -17219,  -17487,  -17750,  -18007,  -18259,  -18505,  -18745,  -18980,  -19209,  -19432,  -19650,  -19861,  -20066,  -20265,  -20458,  -20645,  -20825,  -21000,  -21167,  -21329,  -21483,  -21632,  -21773,  -21908,  -22036,  -22158,  -22273,  -22381,  -22482,  -22577,  -22664,  -22745,  -22818,  -22885,  -22945,  -22998,  -23044,  -23082,  -23114,  -23139,  -23156,  -23167,  -23170,  -23167,  -23156,  -23139,  -23114,  -23082,  -23044,  -22998,  -22945,  -22885,  -22818,  -22745,  -22664,  -22577,  -22482,  -22381,  -22273,  -22158,  -22036,  -21908,  -21773,  -21632,  -21483,  -21329,  -21167,  -21000,  -20825,  -20645,  -20458,  -20265,  -20066,  -19861,  -19650,  -19432,  -19209,  -18980,  -18745,  -18505,  -18259,  -18007,  -17750,  -17487,  -17219,  -16946,  -16667,  -16384,  -16096,  -15802,  -15504,  -15201,  -14894,  -14582,  -14265,  -13944,  -13619,  -13290,  -12957,  -12620,  -12278,  -11934,  -11585,  -11233,  -10878,  -10519,  -10157,  -9792,  -9424,  -9053,  -8680,  -8304,  -7925,  -7544,  -7160,  -6774,  -6387,  -5997,  -5605,  -5212,  -4817,  -4421,  -4024,  -3625,  -3225,  -2824,  -2422,  -2019,  -1616,  -1213,  -809,  -404,  00,  404,  809,  1213,  1616,  2019,  2422,  2824,  3225,  3625,  4024,  4421,  4817,  5212,  5605,  5997,  6387,  6774,  7160,  7544,  7925,  8304,  8680,  9053,  9424,  9792,  10157,  10519,  10878,  11233,  11585,  11934,  12278,  12620,  12957,  13290,  13619,  13944,  14265,  14582,  14894,  15201,  15504,  15802,  16096,  16384,  16667,  16946,  17219,  17487,  17750,  18007,  18259,  18505,  18745,  18980,  19209,  19432,  19650,  19861,  20066,  20265,  20458,  20645,  20825,  21000,  21167,  21329,  21483,  21632,  21773,  21908,  22036,  22158,  22273,  22381,  22482,  22577,  22664,  22745,  22818,  22885,  22945,  22998,  23044,  23082,  23114,  23139,  23156,  23167,  23170 };

const image Frames[] = {
    {66, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07},
    {69, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC1},
    {71, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xCA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF6, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xE4, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0xF8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xF1},
    {76, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF2, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0xC8, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEC, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0xC8, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x82, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23},
    {76, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF6, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xEC, 0x82, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xC0, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x6C, 0x82, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC8, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xEC, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFF, 0xFF, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0xE0, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3E, 0x04, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0xFF, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80},
    {76, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF6, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xEC, 0x82, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xC0, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x6C, 0x82, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC8, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xEC, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFF, 0xFF, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0xE0, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3E, 0x04, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0xFF, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90},
    {76, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF2, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0xC8, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEC, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0xC8, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x82, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xEC, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4F, 0xFF, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xBE, 0x04, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0xE0, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3F, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80},
    {76, 61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF2, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0xC8, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEC, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0xC8, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x82, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xEC, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4F, 0xFF, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xBE, 0x04, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0xE0, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3F, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00},
    {76, 52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF6, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xEC, 0x82, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xC0, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x6C, 0x82, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC8, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xEC, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFF, 0xFF, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0xE0, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3E, 0x04, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0xFF, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00},
    {76, 34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC8, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xEC, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFF, 0xFF, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0xE0, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3E, 0x04, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0xFF, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00},
    {72, 25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80},
    {66, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07},
    {69, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC1},
    {71, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xCA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF6, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xE4, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0xF8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xF1},
    {76, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF2, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0xC8, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEC, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0xC8, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x82, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23},
    {76, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF6, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xEC, 0x82, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xC0, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x6C, 0x82, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC8, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xEC, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFF, 0xFF, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0xE0, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3E, 0x04, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0xFF, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80},
    {76, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF6, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xEC, 0x82, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xC0, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x6C, 0x82, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC8, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xEC, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFF, 0xFF, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0xE0, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3E, 0x04, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0xFF, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90},
    {76, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF2, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0xC8, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEC, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0xC8, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x82, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xEC, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4F, 0xFF, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xBE, 0x04, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0xE0, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3F, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80},
    {76, 61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF2, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0xC8, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEC, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0xC8, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x82, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xEC, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4F, 0xFF, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xBE, 0x04, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0xE0, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3F, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00}
}
 ˙øã∫É∫éæé∫âªçπâÀ